:silent
val datadir = "/code/BIDMach/data/CIFAR10/parts/"
val trainfname = datadir + "trainNCHW%d.fmat.lz4";
val labelsfname = datadir + "labels%d.imat.lz4";
val testfname = datadir + "testNCHW%d.fmat.lz4";
val testlabelsfname = datadir + "testlabels%d.imat.lz4";
val predsfname = datadir + "preds%d.fmat.lz4";

val (nn,opts) = Net.learner(trainfname,labelsfname);

val convt = jcuda.jcudnn.cudnnConvolutionMode.CUDNN_CROSS_CORRELATION


opts.batchSize= 100
opts.npasses = 1
opts.lrate = 1e-4f 

opts.vel_decay = 0.9f
opts.gsq_decay = 0.99f
opts.texp = 0.0f
opts.pstep = 0.1f
opts.hasBias = true;
opts.tensorFormat = Net.TensorNCHW;
opts.autoReset = false;
opts.debugMem = false;

val nodes = {
    import BIDMach.networks.layers.Node._;

    val in = input;
    val scalef = constant(row(0.01f));
    val inscale = in *@ scalef

    val conv1 = conv(inscale)(w=5,h=5,nch=32,stride=1,pad=0,initv=1f,convType=convt);
    val pool1 = pool(conv1)(w=2,h=2,stride=2);
    //val norm1 = batchNormScale(pool1)();
    val relu1 = relu(pool1)();

    val conv2 = conv(relu1)(w=5,h=5,nch=32,stride=1,pad=0,convType=convt);
    val pool2 = pool(conv2)(w=2,h=2,stride=2);
    //val norm2 = batchNormScale(pool2)();
    val relu2 = relu(pool2)();

    val conv3 = conv(relu2)(w=5,h=5,nch=32,stride=1,pad=2,convType=convt);
    val pool3 = pool(conv3)(w=3,h=3,stride=2);
    val fc3 =   linear(pool3)(outdim=10,initv=3e-2f);
    val out =   softmaxout(fc3)(scoreType=1); 

    (in     \ scalef \ inscale on
    conv1  \ pool1  \ relu1  on
    conv2  \ pool2  \ relu2  on
    conv3  \ pool3  \ null   on
    fc3    \ out    \ null   ).t;
}



opts.nodemat = nodes;
val model = nn.model.asInstanceOf[Net];
nn.launchTrain;

import BIDMach.viz._
import BIDMach.networks.layers._
//val v = nn.add_plot(new FilterViz(3,bw=5)).asInstanceOf[FilterViz]
//v.interval = 100

def load(net:Net,fname:String) {
    for (i <- 0 until net.modelmats.length) {
        val data = loadMat(fname+"modelmat%02d.lz4" format i);
        net.modelmats(i)<--data
    }
}

nn.pause
Thread.sleep(1000)
val s = new Synthesis("cifar")
val o = s.opts
load(model,"models/cifar2/")
o.endLayer = 11
o.guidebp = false
o.realImagesPath = "/code/BIDMach/data/CIFAR10/parts/"
o.pretrainedDiscriminatorPath = "models/cifar_discri2/"
s.init(model,null)
o.base = 0
o.scale = 1
o.iter=30
o.langevin = 0
o.dWeight=0.5f
s.mcmc(model)
val ii = IMat(FMat(model.layers(12).target + irow(0->100)*10))
o.derivFunc = (a:Layer)=>{val m = a.deriv;m.set(0f);m(ii)=1f}
o.printInfo = false

:silent

def reset() {
    val ii = IMat(FMat(model.layers(12).target + irow(0->100)*10))
    o.derivFunc = (a:Layer)=>{val m = a.deriv;m.set(0f);m(ii)=1f}
}

//:load gan.ssc
//val s = start("cifar")
//plotscore(s.dscores)
//plotscore(s.gscores)
//plotscore(s.gsteps)
//s.lrate=0.1f
