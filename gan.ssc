import BIDMach.viz._


def start(name:String = "cifar") = {
    val s=new Synthesis(modelname=name)
    s.init(model,null)
    s
}

import BIDMach.networks.layers._
def score(layer:Layer) = {
    val inds = int(layer.target) + layer.asInstanceOf[SoftmaxOutputLayer].coloffsets;
    mean(layer.output(inds))
}


def pimg(s:Synthesis) = {
    val d = s.scale//FMat(s.D.layers(0).output(?,?,?,s.ten)).data.max
    val img = utils.filter2img(FMat(s.D.layers(0).output(?,?,?,?))/d-0.5f,s.D.opts.tensorFormat);
    s.plot.plot_image(img)
}

def show2(mat:FMat) = {
    val img = utils.filter2img(mat/256f-0.5f,s.D.opts.tensorFormat);
    s.plot.plot_image(img)
}

def gen(s:Synthesis,target:Float =0.75f,p:Boolean = false,assignTarget:Boolean = true) = {
    s.mcmc(model,target,p,assignTarget)
    pimg(s)
    //(score(s.D.output_layers(0)),score(model.output_layers(0)))    
    (mean(s.D.output_layers(0).score),mean(model.output_layers(0).score),score(s.D.output_layers(0)),score(model.output_layers(0)))    
}


import scala.collection.mutable.ListBuffer   

def plotscore(score:ListBuffer[Float]){
    plot(()=>FMat(Array(1,score.length),score.toArray))
}

def plothist(m:Mat) {
    hist(()=>FMat(m).reshapeView(m.length),20)
}

//val s = start