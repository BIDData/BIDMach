:silent
val dir="../data/rcv1/"

val a0 = loadSMat(dir + "docs.smat.lz4")
val c0 = loadFMat(dir + "cats.fmat.lz4")(0->100,?)
val rr = rand(c0.ncols,1);
val (ss, ii) = sort2(rr);
val a = a0(?,ii);
val c = c0(?,ii);

val ta = loadSMat(dir + "testdocs.smat.lz4")
val tc = loadFMat(dir + "testcats.fmat.lz4")(0->100,?)

setNumThreads(1)
val (nn,opts)=GLM.learnerX(a,c,1)

opts.batchSize=20000
opts.lrate = 0.02f
opts.npasses = 4
opts.reg1weight = 0.0
opts.links = iones(103,1)
opts.addConstFeat=true;
opts.aopts = opts;
opts.doVariance = true;
opts.evalStep = 3;
//opts.useGPU = false
//Mat.useMKL = false

val model = nn.model.asInstanceOf[GLM]
nn.train

val (mm, mopts) = GLM.predictor(nn.model, ta)
mopts.addConstFeat=opts.addConstFeat;
mopts.batchSize=20000
mopts.links = opts.links
mm.predict

val pc = FMat(mm.preds(0))

//val tc2= tmap * tc
val rc = roc2(pc, tc, 1-tc, 1000)
val nc = sum(tc,2);
val wmean = mean(rc)*nc/sum(nc)
:silent
println("roc6 = %5.4f, roc weighted mean = %5.4f" format (mean(rc)(6), wmean.v))
