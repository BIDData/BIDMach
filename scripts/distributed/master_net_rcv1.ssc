import java.net.{InetAddress,InetSocketAddress}
import BIDMach.allreduce.{Master,Worker,Command}

var addresses:Array[InetSocketAddress] = null
val customLocalWorkerPortsStr = sys.env.get("MASTER_LOCAL_WORKER_PORTS")
println("####################")
customLocalWorkerPortsStr match {
  case Some(workerPortsStr) => {
    addresses = workerPortsStr.split(",").map(_.toInt).map(new InetSocketAddress("0.0.0.0", _))
    println("Using local worker addresses:")
  }
  case None => {
    addresses = scala.io.Source.fromFile("/opt/spark/conf/slaves").getLines.
      map(InetAddress.getByName(_).getHostAddress()).
      map(new InetSocketAddress(_, 50050)).toArray
    println("Using spark slaves:")
  }
}
for (a <- addresses) println(a)
println("####################")

val m = new Master()
val opts = m.opts
opts.trace = 3
opts.intervalMsec = 2000
opts.limit = 1000000
opts.timeScaleMsec = 2e-3f
opts.permuteAlways = false

opts.machineThreshold = 0.75;
opts.minWaitTime = 4500;
opts.timeThresholdMsec = 6000;

val nmachines = addresses.length
val gmods = irow(nmachines)
val gmachines = irow(0->nmachines)

m.init
Thread.sleep(500L)
m.config(gmods, gmachines, addresses, 2)
Thread.sleep(500L)
m.setMachineNumbers
Thread.sleep(500L)
m.sendConfig
// m.setNumModelMats(2) // HACK

// m.parCall((w) => {
//   var learnSource = w.learner.datasource.asInstanceOf[MatSource]
//   var totalNumSamples = learnSource.mats(0).ncols
//   var numWorkers = 1  // TODO: don't hardcode thi
//   var workerNumSamples = totalNumSamples / numWorkers
//   var nstart = (w.imach*workerNumSamples)
//   var nend = Math.min((w.imach+1)*workerNumSamples, totalNumSamples-1)
//   learnSource.mats(0) = learnSource.mats(0)(?, nstart->nend)
//   learnSource.mats(1) = learnSource.mats(1)(?, nstart->nend)
//   "imach: %d, nstart: %d, nend: %d\n" format (
//     w.imach, nstart, nend)
// })
//
// m.parCall((w) => {
//   "imach: %d, machineLen: %d\n" format (w.imach, w.machineArr.length)
// })
//
// m.startLearners(blocking = true)
// m.startUpdates(logLocation = "/opt/BIDMach/logs/master_net_rcv1/%s.log")
//
