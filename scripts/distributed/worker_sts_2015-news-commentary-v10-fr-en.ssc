import BIDMat.{CMat,CSMat,DMat,Dict,FMat,FND,GMat,GDMat,GIMat,GLMat,GSMat,GSDMat,GND,HMat,IDict,Image,IMat,LMat,Mat,SMat,SBMat,SDMat,TMat}
import BIDMat.MatFunctions._
import BIDMat.SciFunctions._
import BIDMat.Solvers._
import BIDMat.Plotting._
import BIDMach.Learner
import BIDMach.models.{Click,FM,GLM,KMeans,KMeansw,LDA,LDAgibbs,Model,NMF,SFA,RandomForest,SVD}
import BIDMach.networks.{Net}
import BIDMach.datasources.{DataSource,MatSource,FileSource,SFileSource}
import BIDMach.datasinks.{DataSink,MatSink}
import BIDMach.mixins.{CosineSim,Perplexity,Top,L1Regularizer,L2Regularizer}
import BIDMach.updaters.{ADAGrad,Batch,BatchNorm,Grad,IncMult,IncNorm,Telescoping}
import BIDMach.causal.{IPTW}
import BIDMach.allreduce.{Master,Worker,Command}
import BIDMach.networks.SeqToSeq

Mat.checkMKL(false)
Mat.checkCUDA
Mat.useCache = false
Mat.useGPUcache = true

val defaultmdir = "/mnt/BIDMach/data/MNT2015/models/"
val mdir = sys.env.get("WORKER_MODEL_DIR") match {
  case Some(mdir0) => {
    println("Using WORKER_MODEL_DIR=%s" format mdir0)
    mdir0
  }
  case None => {
    println("Using default model dir: %s" format defaultmdir)
    defaultmdir
  }
}
val datadir = "/mnt/BIDMach/data/MNT2015/data/"
val PADsym = 1

val batchSize = 128
var src = loadSMat(datadir+"news-commentary-v10.fr-en.fr.smat.lz4")
var dst = loadSMat(datadir+"news-commentary-v10.fr-en.en.smat.lz4")

val ncols = src.ncols
var traincols = Math.floor(0.9*ncols).toInt
traincols = traincols - (traincols % batchSize)
val srcTrain = src(?, 0 -> traincols)
val dstTrain = dst(?, 0 -> traincols)

var srcTrainFull = full(srcTrain)
var dstTrainFull = full(dstTrain)
srcTrainFull ~ srcTrainFull + PADsym * (srcTrainFull == 0)
dstTrainFull ~ dstTrainFull + PADsym * (dstTrainFull == 0)

val (nn, opts) = SeqToSeq.learner(srcTrainFull, dstTrainFull)
val net = nn.model.asInstanceOf[BIDMach.networks.SeqToSeq]

opts.lrate = 0.03f                       // Learning rate
opts.nvocab = 20000                      // Vocabulary limit
opts.npasses = 10                        // Number of passes over the dataset
opts.height = 2                          // Height of the network
opts.dim = 256                           // Dimension of LSTM units
opts.batchSize = batchSize               // Batch size

opts.checkPointInterval = 1f             // How often to save in hours
opts.checkPointFile = mdir+"model256_te0.3_%02d/"
opts.kind = 1                            // LSTM structure
opts.netType = 0                         // Net type (softmax=0, or negsampling=1)
opts.scoreType = 1                       // Score type (logloss=0, accuracy=1)
opts.inwidth = 30                        // Max input sentence length (truncates)
opts.outwidth = 30                       // Max output sentence length (truncates)
opts.hasBias = true                      // Use bias terms in linear layers
opts.pstep = 0.005f                      // How often to print
opts.cumScore = 3                        // Accumulate scores for less-noisy printing
opts.PADsym = PADsym                     // The padding symbol
opts.OOVsym = 2                          // The OOV symbol
opts.STARTsym = 0
opts.reg1weight = 1e-9f                  // L1 regularization weight
opts.texp = 0.3f

val w = new Worker()
val wopts = w.opts
wopts.trace = 1
wopts.machineTrace = 0
wopts.configTimeout = 6000
wopts.reduceTimeout = 6000
wopts.sendTimeout = 2000
wopts.recvTimeout = 2000
wopts.cmdTimeout = 2000

wopts.doElastic = true
wopts.elasticAlpha = 0.9 / 4

val customCommandPortStr = sys.env.get("WORKER_CMD_PORT")
customCommandPortStr match {
  case Some(portStr) => {
    val port = portStr.toInt
    println("Using WORKER_CMD_PORT=%d" format port)
    wopts.commandSocketNum = port
    wopts.responseSocketNum = port + 1
    wopts.peerSocketNum = port + 2
  }
  case None => {}
}

w.start(nn)


// Prediction
// import BIDMach.networks.SeqToSeq
//
// val mdir = "/mnt/BIDMach/data/MNT2015/models/"
// val datadir = "/mnt/BIDMach/data/MNT2015/data/"
// val PADsym = 1
//
// val batchSize = 128
// var src = loadSMat(datadir+"news-commentary-v10.fr-en.fr.smat.lz4")
// var dst = loadSMat(datadir+"news-commentary-v10.fr-en.en.smat.lz4")
// src = src(?, 0 -> (src.ncols - (src.ncols % batchSize)))
// dst = dst(?, 0 -> (dst.ncols - (dst.ncols % batchSize)))
//
// var srcFull = full(src)
// var dstFull = full(src)
// srcFull ~ srcFull + PADsym * (srcFull == 0)
// dstFull ~ dstFull + PADsym * (dstFull == 0)
//
// // val s2s = SeqToSeq.load("/mnt/BIDMach/data/MNT2015/models/local/")
// val s2s = new SeqToSeq
// s2s.setmodelmats(new Array[Mat](7))
// for (i <- 0 until 7) {
//   s2s.modelmats(i) = loadMat("/mnt/BIDMach/data/MNT2015/models/local/modelmat%02d.lz4" format i)
// }
// val (nn, opts) = SeqToSeq.predict(s2s, srcFull)
//
// opts.nvocab = 20000
// opts.height = 2
// opts.dim = 256
// opts.batchSize = 128
//
// opts.kind = 1
// opts.netType = 0
// opts.scoreType = 1
// opts.inwidth = 30
// opts.outwidth = 30
// opts.hasBias = true
// opts.pstep = 0.005f
// opts.cumScore = 3
// opts.PADsym = PADsym
// opts.OOVsym = 2
// opts.STARTsym = 0
//
// opts.debug = 1
//
// nn.predict
//
