import BIDMat.{CMat,CSMat,DMat,Dict,FMat,FND,GMat,GDMat,GIMat,GLMat,GSMat,GSDMat,GND,HMat,IDict,Image,IMat,LMat,Mat,SMat,SBMat,SDMat,TMat}
import BIDMat.MatFunctions._
import BIDMat.SciFunctions._
import BIDMat.Solvers._
import BIDMat.Plotting._
import BIDMach.Learner
import BIDMach.models.{Click,FM,GLM,KMeans,KMeansw,LDA,LDAgibbs,Model,NMF,SFA,RandomForest,SVD}
import BIDMach.networks.{Net}
import BIDMach.datasources.{DataSource,MatSource,FileSource,SFileSource}
import BIDMach.datasinks.{DataSink,MatSink}
import BIDMach.mixins.{CosineSim,Perplexity,Top,L1Regularizer,L2Regularizer}
import BIDMach.updaters.{ADAGrad,Batch,BatchNorm,Grad,IncMult,IncNorm,Telescoping}
import BIDMach.causal.{IPTW}
import BIDMach.allreduce.{Master,Worker,Command}
import BIDMach.networks.SeqToSeq

Mat.checkMKL(false)
Mat.checkCUDA
//Mat.useCache = false
Mat.useGPUcache = true

val mdir = "/mnt/BIDMach/data/MNT2015/models/"
val datadir = "/mnt/BIDMach/data/MNT2015/data/"

val batchSize = 128
var src = loadSMat(datadir+"news-commentary-v10.fr-en.fr.smat.lz4")
var dst = loadSMat(datadir+"news-commentary-v10.fr-en.en.smat.lz4")
src = src(?, 0 -> (src.ncols - (src.ncols % batchSize)))
dst = dst(?, 0 -> (dst.ncols - (dst.ncols % batchSize)))

var srcFull = full(src)
var dstFull = full(src)
srcFull ~ srcFull + -1 * (srcFull == 0)
dstFull ~ dstFull + -1 * (dstFull == 0)

val (nn, opts) = SeqToSeq.learner(srcFull, dstFull)
val net = nn.model.asInstanceOf[BIDMach.networks.SeqToSeq]

opts.lrate = 0.03f                       // Learning rate
opts.nvocab = 20000                      // Vocabulary limit
opts.npasses = 10                         // Number of passes over the dataset
opts.height = 2                          // Height of the network
opts.dim = 256                           // Dimension of LSTM units
opts.batchSize = batchSize               // Batch size

opts.checkPointInterval = 1f             // How often to save in hours
opts.checkPointFile = mdir+"model256_te0.3_%02d/"
opts.kind = 1                            // LSTM structure
opts.netType = 0                         // Net type (softmax=0, or negsampling=1)
opts.scoreType = 1                       // Score type (logloss=0, accuracy=1)
opts.inwidth = 30                        // Max input sentence length (truncates)
opts.outwidth = 30                       // Max output sentence length (truncates)
opts.hasBias = true                      // Use bias terms in linear layers
opts.pstep = 0.005f                      // How often to print
opts.cumScore = 3                        // Accumulate scores for less-noisy printing
opts.PADsym = -1                         // The padding symbol
opts.OOVsym = 1                          // The OOV symbol
opts.STARTsym = 0
opts.reg1weight = 1e-9f                  // L1 regularization weight
opts.texp = 0.3f

//net.opts.debug = 1
//opts.useGPU = false
//Mat.useMKL = false

val w = new Worker()
val wopts = w.opts
wopts.trace = 4
wopts.machineTrace = 1

val customCommandPortStr = sys.env.get("WORKER_CMD_PORT")
customCommandPortStr match {
  case Some(portStr) => {
    val port = portStr.toInt
    println("Using WORKER_CMD_PORT=%d" format port)
    wopts.commandSocketNum = port
    wopts.responseSocketNum = port + 1
    wopts.peerSocketNum = port + 2
  }
  case None => {}
}

//w.start(nn)
