import BIDMat.{CMat,CSMat,DMat,Dict,FMat,FND,GMat,GDMat,GIMat,GLMat,GSMat,GSDMat,GND,HMat,IDict,Image,IMat,LMat,Mat,SMat,SBMat,SDMat,TMat}
import BIDMat.MatFunctions._
import BIDMat.SciFunctions._
import BIDMat.Solvers._
import BIDMat.Plotting._
import BIDMach.Learner
import BIDMach.models.{Click,FM,GLM,KMeans,KMeansw,LDA,LDAgibbs,Model,NMF,SFA,RandomForest,SVD}
import BIDMach.networks.{Net}
import BIDMach.datasources.{DataSource,MatSource,FileSource,SFileSource}
import BIDMach.datasinks.{DataSink,MatSink}
import BIDMach.mixins.{CosineSim,Perplexity,Top,L1Regularizer,L2Regularizer}
import BIDMach.updaters.{ADAGrad,Batch,BatchNorm,Grad,IncMult,IncNorm,Telescoping}
import BIDMach.causal.{IPTW}
import BIDMach.allreduce.{Master,Worker,Command}
import BIDMach.networks.SeqToSeq

Mat.checkMKL(false)
Mat.checkCUDA
Mat.useCache = false
Mat.useGPUcache = true

val dir="/mnt/BIDMach/data/rcv1/"

val a0 = loadSMat(dir + "docs.smat.lz4")(0->100000,?)
val c0 = loadFMat(dir + "cats.fmat.lz4")(0->100,?)
val rr = rand(c0.ncols,1);
val (ss, ii) = sort2(rr);
val a = a0(?,ii);
val c = c0(?,ii);

val ta = loadSMat(dir + "testdocs.smat.lz4")(0->100000,0->23000)
val tc = loadFMat(dir + "testcats.fmat.lz4")(0->100,0->23000)

val (nn,opts) = Net.learnerX(a,c);

opts.aopts = opts
opts.batchSize=200
opts.reg1weight = 0.0001
opts.npasses = 4
opts.hasBias = true
opts.links = iones(100,1);
opts.lrate = 0.4f // best for 6-layer
opts.lrate = 0.01f
opts.texp = 0.3f
opts.nweight = 1e-4f

val net = Net.dnodes4(2,500,0.5f,100,opts,2);
opts.nodeset = net

val w = new Worker()
val wopts = w.opts
wopts.trace = 4
wopts.machineTrace = 1

wopts.configTimeout = 6000
wopts.reduceTimeout = 6000
wopts.sendTimeout = 2000
wopts.recvTimeout = 2000
wopts.cmdTimeout = 2000

val customCommandPortStr = sys.env.get("WORKER_CMD_PORT")
customCommandPortStr match {
  case Some(portStr) => {
    val port = portStr.toInt
    println("Using WORKER_CMD_PORT=%d" format port)
    wopts.commandSocketNum = port
    wopts.responseSocketNum = port + 1
    wopts.peerSocketNum = port + 2
  }
  case None => {}
}

w.start(nn)
