:silent
import BIDMach.networks.Net

val dir="/mnt/BIDMach/data/rcv1/"

val a0 = loadSMat(dir + "docs.smat.lz4")(0->100000,?)
val c0 = loadFMat(dir + "cats.fmat.lz4")(0->100,?)
val rr = rand(c0.ncols,1);
val (ss, ii) = sort2(rr);
val a = a0(?,ii);
val c = c0(?,ii);

val ta = loadSMat(dir + "testdocs.smat.lz4")(0->100000,0->23000)
val tc = loadFMat(dir + "testcats.fmat.lz4")(0->100,0->23000)

val (nn,opts) = Net.learnerX(a,c);

opts.aopts = opts
opts.batchSize=200
opts.reg1weight = 0.0001
opts.npasses = 2
opts.hasBias = true
opts.links = iones(100,1);
opts.lrate = 0.4f // best for 6-layer
opts.lrate = 0.01f
opts.texp = 0.3f
opts.nweight = 1e-4f
//opts.useGPU = false

val net = Net.dnodes4(2,500,0.5f,100,opts,2);
opts.nodeset = net

val dnn = nn.model.asInstanceOf[Net]

nn.train


val (mm,mopts) = Net.predictor(dnn, ta);
val dmm = mm.model.asInstanceOf[Net]
mopts.batchSize=1000

mm.predict

val pc = FMat(mm.preds(0))

val rc = roc2(pc, tc, 1-tc, 1000)
val counts = sum(tc,2);
:silent
println("auc6 = %5.4f, auc weighted mean = %5.4f" format (mean(rc)(6), (mean(rc) * counts / sum(counts)).dv));

