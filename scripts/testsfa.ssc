:silent
val dir="../data/netflix/"

val exists = (new java.io.File(dir+"newtrain.smat.lz4")).exists

val a0= if (exists) loadSMat(dir+"newtrain.smat.lz4") else loadSMat(dir+"train.smat.lz4")
val ta0= if (exists) loadSMat(dir+"newtest.smat.lz4") else loadSMat(dir+"test.smat.lz4")

val (a, ta) = if (!exists) {
val (ii, jj, vv) = find3(a0+ta0);
val ir = rand(ii.length, 1) < 0.1f;
val itrain = find(ir == 0);
val itest = find(ir);
val a = sparse(ii(itrain),jj(itrain),vv(itrain),a0.nrows,a0.ncols);
val ta = sparse(ii(itest),jj(itest),vv(itest),a0.nrows,a0.ncols);
saveSMat(dir+"newtrain.smat.lz4", a)
saveSMat(dir+"newtest.smat.lz4", ta)
(a, ta)
} else {
(a0, ta0)
}

val d = 512

val fact = zeros(d, a.ncols);
val (nn,opts) = SFA.learnerX(a,fact,d)

// good values for movielens 10m
opts.lambdam = 5f
opts.lambdau = 5f
opts.uiter = 8
opts.npasses = 2
opts.batchSize = 2000

// good values for netflix
opts.batchSize = 1000 
opts.lambdau =0.5f;
opts.regumean = 0.01f;
opts.lambdam = 0.03f;
opts.regmmean = 0.001f;

val lambda = 15f
opts.lambdau = lambda;
opts.regumean = lambda;
opts.lambdam = lambda / 500000;
opts.regmmean = opts.lambdam
opts.uiter = 4
opts.startup = 1
opts.npasses = 3
opts.evalStep = 31
opts.doUsers = true
opts.lrate = 0.003  // For ADAGRAD
//opts.texp = null
opts.uconvg = 1e-3f
//opts.weightByUser = true
//opts.traceConverge = true
//opts.autoReset = false
//opts.useDouble = true

nn.train

val pa = (ta != 0);
val (mm,mopts) = SFA.predictor(nn.model,a,fact,pa)
mopts.batchSize = 10000;

mm.predict

val diff = ta.contents - pa.contents
val rmse = sqrt((diff ^* diff) / diff.length)
println("RMSE = %f" format rmse.v);

:silent
