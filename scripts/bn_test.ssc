// Script to test out BayesNet.scala for the general case.

// BayesNet.scala now assuming general case.

// This is Huasha's data
// val dag = loadSMat("data/dlm_data_official/sortedDag.lz4");
// val data = loadSMat("data/dlm_data_official/dlm_train_random.lz4")
// val states = loadIMat("data/dlm_data_official/states.lz4")

// This is the data I am using following Daphne's example DAG. For now use files named 
// "data_student_{K}perc{_smat}.lz4" where K is a percent and sometimes we have smats.
// val data = loadFMat("data/bayesnet_student_data/data_student_50perc.lz4")
// val dag = loadSMat("data/bayesnet_student_data/dagStudent.lz4")
// val states = loadIMat("data/bayesnet_student_data/statesStudent.lz4")

// NEW! HMM data.
// val data = loadFMat("data/hmm_data/hmm_data_25perc.lz4")
// val dag = loadSMat("data/hmm_data/hmm_dag.lz4")
// val states = loadFMat("data/hmm_data/hmm_states.lz4")
// val equiv = loadFMat("data/hmm_data/hmm_equiv.lz4")

// NEW AGAIN! Jason Sellers data.
val data = loadFMat("data/jason_sellers_data/all_no_empties_mode_data.lz4")
val dag = loadSMat("data/jason_sellers_data/all_no_empties_mode_dag.lz4")
val states = loadFMat("data/jason_sellers_data/all_no_empties_mode_statesPerNode.lz4")
val equiv = loadFMat("data/jason_sellers_data/all_no_empties_mode_equivClasses.lz4")

// Now the settings. CHANGE THE "equiv" STUFF TO NULL AS NEEDED! 
// val (nn , opts) = BIDMach.models.BayesNet.learner(states , dag , null , data)
val (nn , opts) = BIDMach.models.BayesNet.learner(states , dag , equiv , data)
opts.npasses = 100
opts.useGPU = true // TODO need to fix typing errors
opts.batchSize = 20 // Has to be small for data with lots of variables
opts.what
nn.train
nn.modelmats(0).t
