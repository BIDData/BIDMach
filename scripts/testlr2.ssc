//:silent
val odir = "/home/manytrees/data/crowdstrike/data/crowdstrike/"
val mdir = "/home/manytrees/data/cs/bidmach/"
val mydir = "d:/data/manytrees/cs/";

val dat0 = loadSMat(mydir+"traindat2.smat.lz4")
val labels0 = FMat(loadIMat(mydir+"trainlabels.imat.lz4"));

val testdat0 = loadSMat(mydir+"testdat2.smat.lz4")
val testlabels0 = FMat(loadIMat(mydir+"testlabels.imat.lz4"));

val mind0 = mini(dat0,2);
val dat1 = dat0 - mind0;
val maxd0 = max(maxi(dat1,2),1);

val dat = dat1 / maxd0;
val testdat = (testdat0 - mind0) / maxd0;
max(testdat.contents, 0f, testdat.contents);
min(testdat.contents, 1f, testdat.contents);

val labels = (labels0 + 1) / 2
val testlabels = (testlabels0 + 1) / 2

val (nn,opts)=GLM.learner(dat,labels,1)

opts.batchSize=2000
opts.lrate = 0.01
opts.texp = 0.4f
opts.npasses = 10 
opts.reg1weight = 0.0
opts.links = iones(1,1)
opts.addConstFeat=true;
//opts.aopts = opts;

opts.hashFeatures = 10000000;
opts.hashBound1 = 1000000;
opts.hashBound2 = 10000000;

nn.train

val pc = zeros(testlabels.nrows, testlabels.ncols);
val (mm, mopts) = GLM.predictor(nn.model, testdat, pc)
mopts.addConstFeat=opts.addConstFeat;
mopts.batchSize=5000
mopts.links = opts.links
mm.predict

val rc = roc2(pc, testlabels, 1-testlabels, 100000)

//:silent

val keys = loadIMat(mydir + "testhashes.imat.lz4");
val len = keys.length
val ekeys = find((keys(0, 1->len) \ -1) != keys).t;

:load testlrx.ssc