:silent

import BIDMach.allreduce.{Master,Worker,Command}

val mdir = "../data/criteo/parts/"

val (nn,opts) = GLM.learnerX(List(mdir+"trainsorted%02d.smat.lz4",mdir+"trainlabel%02d.fmat.lz4"));
val ntest = 2;
opts.nend = 20 - ntest;
opts.lrate = 0.0001f;
opts.reg1weight = 0.0001f;
opts.batchSize=1000;
opts.npasses=2;
opts.links = irow(1);
//opts.pstep = 0.001f;
opts.aopts = opts;
opts.texp = 0.4f;

val model = nn.model.asInstanceOf[GLM];
nn.paused = true

val a = new Worker();
val wopts = a.opts;
wopts.trace = 3;

a.start(nn);

nn.train

a.stop

val mm = FMat(model.modelmats(0))

val filesize = 500000;
val tscores = dzeros(filesize*ntest, 1);
val tcats = dzeros(filesize*ntest, 1);
var len = 0;
for (i <- 0 until ntest) {
  val a = loadSMat(mdir + "trainsorted%02d.smat.lz4" format i + 18);
  val c = loadFMat(mdir + "trainlabel%02d.fmat.lz4" format i + 18);
  val sc = mm * a;
  tscores(i * filesize -> (i * filesize + sc.length), 0) = DMat(sc.t);
  tcats(i * filesize -> (i * filesize + sc.length), 0) = DMat(c.t);
  len += c.length;
  print(".");
}
val scores = tscores(0->len,0);
val cats = tcats(0->len,0);

val rr = roc(scores, cats, 1-cats, 1000)

mean(rr)

val bounds = 7.0
val bscores = min(max(scores, drow(-bounds)), drow(bounds));
val probs = 1/(1 + exp(-bscores));
val lln = ((cats dot ln(probs)) + ((1-cats) dot ln(1-probs)))/probs.length.toDouble

println("roc area = %5.4f, ll = %5.4f" format (mean(rr).v, lln.v))
:silent

// npasses  batchSize     lrate      l1reg       ll        time         AUC
//    2       1000        0.0003     0.0001    0.5176      3600
//   20      10000        0.0003     0.0001    0.5072      3732
//    5      10000        0.0003     0.0001    0.5242      941
//    5      10000        0.0003     0.00001   0.5241      936
//    5      10000        0.0003     0.001     0.5242      945
//    5      10000        0.0003     0.01      0.5245      944
//    5      10000        0.0003     0.1       0.5262      942
//    5      30000        0.0003     0.01      0.5364      364
//   15      30000        0.0003     0.01      0.5216      1096
//   50      30000        0.0003     0.01      0.5062      3614         0.7473
//  200      30000        0.0003     0.01      0.4922     14430         0.7592