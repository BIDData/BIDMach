
import akka.actor.{Actor,Props,ActorSystem}
import akka.cluster.Cluster
import akka.cluster.ClusterEvent._
import com.typesafe.config.ConfigFactory
import akka.event.Logging
import akka.actor.ActorLogging


class SimpleClusterListener extends Actor with ActorLogging {

  val cluster = Cluster(context.system)

  // subscribe to cluster changes, re-subscribe when restart 
  override def preStart(): Unit = {
    cluster.subscribe(self, initialStateMode = InitialStateAsEvents,
      classOf[MemberEvent], classOf[UnreachableMember])
  }
  override def postStop(): Unit = cluster.unsubscribe(self)

  def receive = {
    case MemberUp(member) =>
      log.info("Member is Up: {}", member.address)
    case UnreachableMember(member) =>
      log.info("Member detected as unreachable: {}", member)
    case MemberRemoved(member, previousStatus) =>
      log.info("Member is Removed: {} after {}",
        member.address, previousStatus)
    case _: MemberEvent => // ignore
  }
}

def startup(ports: Seq[String]) = {
    ports map { port =>
		// Override the configuration of the port
		val config = ConfigFactory.parseString("akka.remote.netty.tcp.port=" + port).
		withFallback(ConfigFactory.load())
		
		// Create an Akka system
		val system = ActorSystem("ClusterSystem", config)
		// Create an actor that handles cluster domain events
		system.actorOf(Props[SimpleClusterListener], name = "clusterListener")
    }
}

val monitors = startup(Seq("2551","2552","0"))
