:silent
import BIDMat.TMat

val mdir = "../data/criteo/parts/"

val (nn,opts) = Net.learnerX(mdir+"trainsortedx%02d.smat.lz4",mdir+"trainlabel%02d.fmat.lz4");

opts.nend = 90
opts.batchSize= 100
opts.npasses = 1
opts.lrate = 0.01f 
opts.texp = 0.3f
opts.pstep = 0.001f

opts.aopts = opts
//opts.reg1weight = 0.0001
//opts.hasBias = true
opts.links = iones(1,1);
opts.nweight = 1e-4f
opts.lookahead = 0
opts.autoReset = false

val tshape = 0.25f
val shape = irow(200,120,80,50,1)
opts.tmatShape = Net.powerShape(tshape)_;
opts.nodeset = Net.powerNet(shape,opts,0,2);
opts.what
println(tshape.toString)
println(shape.toString)

val model = nn.model.asInstanceOf[Net]
nn.train

val res = nn.results(0,?)

val testdata = loadSMat(mdir+"trainsortedx%02d.smat.lz4" format opts.nend);
val testlabels = loadFMat(mdir+"trainlabel%02d.fmat.lz4" format opts.nend);

val (mm, mopts) = Net.predictor(model, testdata);
mm.predict

val preds=FMat(mm.preds(0))

val ll = DMat(ln(preds *@ testlabels + (1-preds) *@ (1-testlabels)))
val rc = roc(preds, testlabels, 1-testlabels, 1000);

:silent

(mean(ll), mean(rc))