:silent
val traindir = "../../data/MNIST/"

val train0 =       loadIDX(traindir+"train-images-idx3-ubyte").reshapeView(1,28,28,60000);
val trainlabels0 = loadIDX(traindir+"train-labels-idx1-ubyte").reshapeView(1,60000);
val test =         loadIDX(traindir+"t10k-images-idx3-ubyte").reshapeView(1,28,28,10000);
val testlabels =   loadIDX(traindir+"t10k-labels-idx1-ubyte").reshapeView(1,10000);

val rp = randperm(60000);
val train = train0(?,?,?,rp);
val trainlabels = trainlabels0(?,rp);

val mt = train.mean(irow(3));
train ~ train - mt;
test ~ test - mt;

val (nn,opts) = Net.learner(train,trainlabels);

val convt = jcuda.jcudnn.cudnnConvolutionMode.CUDNN_CROSS_CORRELATION


opts.batchSize= 32
opts.npasses = 10
opts.lrate = 1e-4f 
opts.texp = 0.1f
opts.pstep = 0.1f
opts.hasBias = true;
//opts.lookahead = 0;
opts.autoReset = false;
opts.tensorFormat = Net.TensorNCHW;

import BIDMach.networks.layers.Node._;

val in = input();

val conv1 = conv(in)(w=5,h=5,nch=6,stride=1,pad=2,initv=0.01f,convType=convt);
val pool1 = pool(conv1)(w=2,h=2,stride=2,pad=0);
val bns1 = batchNormScale(pool1)();
val relu1 = relu(bns1)();

val conv2 = conv(relu1)(w=5,h=5,nch=16,stride=1,pad=2,convType=convt);   
val pool2 = pool(conv2)(w=2,h=2,stride=2,pad=0);
val bns2 = batchNormScale(pool2)();
val relu2 = relu(bns2)();

val fc3 = linear(relu2)(outdim=120,initv=4e-2f);
val relu3 = relu(fc3)();

val fc4 = linear(relu3)(outdim=84,initv=1e-1f);
val relu4  = relu(fc4)();

val fc5  = linear(relu4)(outdim=10,initv=1e-1f);
val out = softmaxout(fc5)(scoreType=1);
//val out = softmaxout(fc5 )();

val nodes = (in     \ null    \ null   \ null    on
             conv1  \ pool1   \ bns1   \ relu1   on
             conv2  \ pool2   \ bns2   \ relu2   on
             fc3    \ relu3   \ null   \ null    on
             fc4    \ relu4   \ null   \ null    on
	     fc5    \ out     \ null   \ null).t



opts.nodemat = nodes;
val model = nn.model.asInstanceOf[Net];
nn.train;

val (mm, mopts) =  Net.predictor(model, test, testlabels);
mopts.autoReset = false;

val net = mm.model.asInstanceOf[Net];
mm.predict;

println("Accuracy = %f" format mean(mm.results(0,?),2).v);
:silent


