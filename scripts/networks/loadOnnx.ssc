import BIDMach.networks.layers._
import BIDMach.io.Onnx
import scala.collection.mutable.HashMap

//val modelname = "squeezenet"
//val modelname = "inception_v2"
val modelname = "densenet121"
val modelFile = "/code/onnx/models/"+modelname+"/"+modelname+"/model.onnx";
val dataname = "data_0"
val modelInputBGR = true;
val batchSize = 32;

val traindir = "../../data/ImageNet/train/";
val testdir = "../../data/ImageNet/val/";
val traindata = traindir+"partNCHW%04d.bmat.lz4";
val trainlabels = traindir+"label%04d.imat.lz4";
val testdata = testdir+"partNCHW%04d.bmat.lz4";
val testlabels = testdir+"label%04d.imat.lz4";
val testpreds = testdir+"pred%04d.fmat.lz4";

val means = ones(3\256\256\batchSize) *@ loadFMat(traindir+"means.fmat.lz4");
val dataLink = new HashMap[String,Node];

Net.initDefaultNodeSet;
{
import BIDMach.networks.layers.Node._;

val in =        input();
val meanv =     const(means);
val din =       in - meanv;
val cin =       crop(din)()

// How to find the frontend output:
dataLink(dataname) = cin
}
val frontEnd = Net.getDefaultNodeSet

println("Reading Model")
val onnx = new Onnx
val (nodes, modelmats) = onnx.readModel(modelFile, frontEnd, dataLink)
if (modelInputBGR) modelmats(0) = Onnx.fromRGBtoBGR(modelmats(0))

println("Starting Predictor")
val opts = new Net.FilePredOptions
val net0 = new Net(opts)
net0.setmodelmats(modelmats)
opts.nodeset=nodes

val (mm, mopts) =  Net.predLabels(net0, testdata, testlabels);
mopts.tensorFormat = Net.TensorNCHW;
mopts.inplace = Net.BackwardCaching;
mopts.convType = Net.CrossCorrelation;
mopts.batchSize= batchSize
mopts.hasBias = true
mopts.autoReset = false
    
val net = mm.model.asInstanceOf[Net];
mm.predict; 


println("Average Accuracy = %5.4f" format mean(mm.results(0,?)).v)



