
val tt = "train";

val imagenetroot = "/data/ImageNet/2012resized/"+tt+"/";
val dataroot = "../../data/ImageNet/";
val savefname = tt+"/part%04d.fmat.lz4";
val labelfname = tt+"/label%04d.imat.lz4";
val namesfname = tt+"/names%04d.csmat.txt";
val loadtable = loadCSMat(dataroot+tt+".txt");

val bsize = 1024;

val nimgs = loadtable.nrows;

val fnames = loadtable(?,0);
val alllabels = loadtable(?,1).toIMat;

val perm = randperm(nimgs);
val mat = zeros(4 \ 256 \ 256 \ bsize);
val labels = izeros(1, bsize);
val names = CSMat(bsize,1);
var i = 0;
var jin = 0;
while (jin < nimgs) {
    val todo = math.min(bsize, nimgs - jin);
    var j = 0;
    while (j < todo && jin < nimgs) {
	val indx = perm(jin);
	try {
	    val im = loadImage(imagenetroot+fnames(indx));
	    mat(?,?,?,j) = im.toFMat;
	    labels(0, j) = alllabels(indx);
	    names(j) = fnames(indx);
	    j += 1;
	} catch {
	    case e:Exception => println("\nProblem reading %s, continuing" format fnames(indx));
	}
	jin += 1;
    }
    if (j == bsize) {
	saveFMat(dataroot+savefname format i, mat);
	saveIMat(dataroot+labelfname format i, labels);
	saveCSMat(dataroot+namesfname format i, names);
    } else {
	saveFMat(dataroot+savefname format i, mat.colslice(0,j));
	saveIMat(dataroot+labelfname format i, labels.colslice(0,j));
	saveCSMat(dataroot+namesfname format i, names(0->j,0));
    }
    i += 1;
    print(".");
}
println("");

