:silent
val traindir = "../../data/MNIST/"

val train0 =       loadIDX(traindir+"train-images-idx3-ubyte").reshapeView(1,28,28,60000);
val trainlabels0 = loadIDX(traindir+"train-labels-idx1-ubyte").reshapeView(1,60000);
val test =        loadIDX(traindir+"t10k-images-idx3-ubyte").reshapeView(1,28,28,10000);
val testlabels =  loadIDX(traindir+"t10k-labels-idx1-ubyte").reshapeView(1,10000);

val rp = randperm(60000);
val train = train0(?,?,?,rp);
val trainlabels = trainlabels0(?,rp);

val mt = train.mean(irow(3));
train ~ train - mt;
test ~ test - mt;

val (nn,opts) = Net.learner(train,trainlabels);

val convt = jcuda.jcudnn.cudnnConvolutionMode.CUDNN_CROSS_CORRELATION


opts.batchSize= 32
opts.npasses = 20
opts.lrate = 1e-3f 
opts.texp = 0.1f
opts.pstep = 0.2f
//opts.lookahead = 0;
opts.autoReset = false;
opts.tensorFormat = Net.TensorNCHW;

import BIDMach.networks.layers.Node._;

val in = input;

val conv1 = conv(in)(w=5,h=5,nch=20,stride=2,pad=2,initv=0.01f,convType=convt);
val bns1 = batchNormScale(conv1)();
val relu1 = relu(bns1);

val conv2 = conv(relu1)(w=5,h=5,nch=20,stride=2,pad=2,convType=convt);
val bns2 = batchNormScale(conv2)();
val relu2 = relu(bns2);

val fc3 = linear(relu2)(outdim=500,initv=3e-2f);
val relu3 = relu(fc3);

val fc4 = linear(relu3)(outdim=10,initv=5e-2f);
//val out = softmaxout(fc4)();
val out = softmaxout(fc4)(scoreType=1); 

val nodes = (in     \ null    \ null   on
             conv1  \ bns1    \ relu1  on
             conv2  \ bns2    \ relu2  on
             fc3    \ relu3   \ null   on
             fc4    \ out     \ null   ).t



opts.nodemat = nodes;
val model = nn.model.asInstanceOf[Net];
nn.train;

val (mm, mopts) =  Net.predictor(model, test);
mm.predict;


:silent

