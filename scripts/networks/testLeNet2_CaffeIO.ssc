//:silent
import BIDMach.extern._
import BIDMach.networks.layers._
import java.io.FileReader

val traindir = "../../data/MNIST/"

val train0 =       loadIDX(traindir+"train-images-idx3-ubyte").reshapeView(1,28,28,60000);
val trainlabels0 = loadIDX(traindir+"train-labels-idx1-ubyte").reshapeView(1,60000);
val test =         loadIDX(traindir+"t10k-images-idx3-ubyte").reshapeView(1,28,28,10000);
val testlabels =   loadIDX(traindir+"t10k-labels-idx1-ubyte").reshapeView(1,10000);

val rp = randperm(60000);
val train = train0(?,?,?,rp);
val trainlabels = trainlabels0(?,rp);

val mt = train.mean(irow(3));
train ~ train - mt;
test ~ test - mt;

val (nn,opts) = Net.learner(train,trainlabels);

val convt = jcuda.jcudnn.cudnnConvolutionMode.CUDNN_CROSS_CORRELATION


opts.batchSize= 64
opts.npasses = 2

opts.lrate = 1e-3f 
opts.texp = 0.3f
opts.pstep = 0.1f
opts.hasBias = true;
opts.tensorFormat = Net.TensorNCHW;
//opts.autoReset = false;

var f:FileReader = null
var nodeSet:NodeSet = null
try {
  f = new FileReader("lenet_train_test.prototxt")
  nodeSet = CaffeIO.mkNodeSetFromProtobuf(f)
} finally {
  if (f != null) {
    f.close()
  }
}

// XXX this appears to be missing support in the protobuf
nodeSet(9).asInstanceOf[SoftmaxOutputNode].scoreType = SoftmaxOutputLayer.AccuracyLoss




opts.nodeset = nodeSet;
val model = nn.model.asInstanceOf[Net];
nn.train;

val (mm, mopts) =  Net.predictor(model, test, testlabels);
mopts.batchSize = 64;
val mmodel = mm.model.asInstanceOf[Net];
mm.predict;

println("Accuracy = %f" format mean(mm.results(0,?),2).v);

//:silent

