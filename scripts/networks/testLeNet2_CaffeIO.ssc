//:silent
import BIDMach.extern._
import BIDMach.networks.layers._
import java.io.FileReader

val traindir = "../../data/MNIST/"

val train0 =       loadIDX(traindir+"train-images-idx3-ubyte").reshapeView(1,28,28,60000);
val trainlabels0 = loadIDX(traindir+"train-labels-idx1-ubyte").reshapeView(1,60000);
val test =         loadIDX(traindir+"t10k-images-idx3-ubyte").reshapeView(1,28,28,10000);
val testlabels =   loadIDX(traindir+"t10k-labels-idx1-ubyte").reshapeView(1,10000);

val rp = randperm(60000);
val train = train0(?,?,?,rp);
val trainlabels = trainlabels0(?,rp);

val mt = train.mean(irow(3));
train ~ train - mt;
test ~ test - mt;

val (nn,opts) = Net.learner(train,trainlabels);

val model = nn.model.asInstanceOf[Net]

var f:FileReader = null
var caffeModel:CaffeModel = null
try {
  f = new FileReader("lenet_solver.prototxt")
  caffeModel = CaffeModel.loadFromSolver(f, opts, model)
} finally {
  if (f ne null) {
    f.close()
  }
}

opts.npasses = 2
//opts.autoReset = false;


nn.train;

val (mm, mopts) = caffeModel.predictor(test, testlabels);
mopts.autoReset = false
val mmodel = mm.model.asInstanceOf[Net];
mm.predict;

println("Accuracy = %f" format mean(mm.results(0,?),2).v);

//:silent

