val datadir = "../../data/CIFAR10/parts/"
val trainfname = datadir + "trainNCHW%d.fmat.lz4";
val labelsfname = datadir + "labels%d.imat.lz4";
val testfname = datadir + "testNCHW%d.fmat.lz4";
val testlabelsfname = datadir + "testlabels%d.imat.lz4";
val predsfname = datadir + "preds%d.fmat.lz4";

val (nn,opts) = Net.learner(trainfname,labelsfname);

val convt = jcuda.jcudnn.cudnnConvolutionMode.CUDNN_CROSS_CORRELATION


opts.batchSize= 100
opts.npasses = 20
opts.l2reg = 0.0003f;
opts.vel_decay = 0.9f;
opts.texp = 0.0f
opts.pstep = 0.1f
opts.hasBias = true;
opts.tensorFormat = Net.TensorNCHW;

val lrinit = 1e-3f;

def lr_update(ipass:Float, istep:Float, frac:Float):Float = {
  val lr = if (ipass < 10) {
      lrinit
  } else if (ipass < 15) {
      lrinit/10
  } else
      lrinit/100
  lr
}
opts.lr_policy = lr_update _;

val means = ones(3\32\32\opts.batchSize) *@ loadFMat(datadir+"meansNCHW.fmat.lz4");

{
import BIDMach.networks.layers.Node._;

Net.initDefaultNodeSet;

val in =    input();
val meanv = const(means);
val din =   in - meanv;
val scalef = constant(row(0.01f));
val inscale = din *@ scalef

val conv1 = conv(inscale)(w=5,h=5,nch=32,stride=2,pad=2,initv=1f,convType=convt);
val norm1 = batchNormScale(conv1)();
val relu1 = relu(norm1)();

val conv2 = conv(relu1)(w=3,h=3,nch=32,stride=1,pad=1,convType=convt);
val norm2 = batchNormScale(conv2)();
val relu2 = relu(norm2)();

val conv3 = conv(relu2)(w=3,h=3,nch=48,stride=2,pad=1,convType=convt);
val norm3 = batchNormScale(conv3)();
val relu3 = relu(norm3)();

val conv4 = conv(relu3)(w=3,h=3,nch=48,stride=1,pad=1,convType=convt);
val norm4 = batchNormScale(conv4)();
val relu4 = relu(norm4)();

val conv5 = conv(relu4)(w=3,h=3,nch=64,stride=2,pad=1,convType=convt);
val norm5 = batchNormScale(conv5)();
val relu5 = relu(norm5)();

val conv6 = conv(relu5)(w=3,h=3,nch=64,stride=1,pad=1,convType=convt);
val norm6 = batchNormScale(conv6)();
val relu6 = relu(norm6)();
val fc6 =   linear(relu6)(outdim=10);
val out =   softmaxout(fc6)(scoreType=1); 

opts.nodeset=Net.getDefaultNodeSet
}

val model = nn.model.asInstanceOf[Net];

nn.train

val (mm, mopts) =  Net.predictor(model, testfname, testlabelsfname, predsfname);
mopts.batchSize = 100;
val mmodel = mm.model.asInstanceOf[Net];
mm.predict;

println("Accuracy = %f" format mean(mm.results(0,?),2).v);

