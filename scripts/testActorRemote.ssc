import akka.actor.{Actor, ActorLogging, ActorRef, ActorSystem, Props}
import akka.util.Timeout
import com.typesafe.config.ConfigFactory

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration._


case class SendVal(val v: Int) {
}

case class RecvVal(val v: Int) {
}

case class SendTo(val dest: ActorRef, val v: Int) {
}

case class SendToRemote(val destPath: String, val v: Int) {
}

case class GetVal() {
  var v = 0;
}

class TestActor(name: String) extends Actor with ActorLogging {
  var v = 0;
  val thisName = name;

  def receive = {
    case x: SendToRemote => {
      println(s"Actor $thisName sending remote message to ${x.destPath}")
      implicit val timeout = Timeout(5 seconds)
      context.actorSelection(x.destPath).resolveOne().map(des => {
        des ! new SendVal(x.v)
      })
    }

    case x: SendTo => {
      println(s"Actor $thisName sending message ${x.v} to ${x.dest}")
      x.dest ! new SendVal(x.v);
    }
    case x: SendVal => {
      val m = new RecvVal(x.v * 2);
      println(s"Actor $thisName got value ${x.v}, sending ack to sender $m")
      sender ! m;
    }
    case x: RecvVal => {
      println(s"Actor $thisName receiving ${x.v} and store it")
      v = x.v;
    }
    case x: GetVal => {
      x.v = v;
    }
    case _ => {}
  }
}

val clusterName = "ClusterSystem"
val actorName = "testActor"

/**
  * Specify remote routing config, with given port.
  * Reference: http://doc.akka.io/docs/akka/2.5.4/scala/remoting.html
  */
def createConf(port: String) = {
  ConfigFactory.parseString(
    s"""
       |akka {
       |  actor {
       |    provider = remote
       |  }
       |  remote {
       |    enabled-transports = ["akka.remote.netty.tcp"]
       |    netty.tcp {
       |      hostname = "127.0.0.1"
       |      port = $port
       |    }
       | }
       |}
        """.stripMargin)
}


def startup(ports: Seq[String]) = {
  ports map { port =>
    // Override the configuration of the port
    val conf = createConf(port)
    // Create an Akka system
    val system = ActorSystem(clusterName, conf)
    // Create an actor that handles cluster domain events
    system.actorOf(Props.create(classOf[TestActor], port), name = actorName)
  }
}

val nodes = startup(Seq("2553", "2554"));

// Make second actor talk to first actor path specified by port 2553
val actorRefSec = nodes(1)
implicit val timeout = Timeout(5 seconds)
actorRefSec ! new SendToRemote(s"akka.tcp://$clusterName@127.0.0.1:2553/user/$actorName", 10)


/**
  * Deal with ips
  */
def findMasterIp(): String = {
    import scala.collection.JavaConversions._
    import java.nio.charset.Charset
    import java.nio.file.{Files, Paths}
    val masterFilePath = Paths.get("/code/BIDMach/conf", "master")
    val charset = Charset.forName("ISO-8859-1")
    val lines = Files.readAllLines(masterFilePath, charset)
    lines(0)
}

def findCurrentIp(): String = {
    import java.net._
    val ip = InetAddress.getLocalHost()
    ip.getHostAddress
}

println(findCurrentIp())
println(findMasterIp())


