:silent


/**
This scripts requires pretrained models.
They should be put at models/mnist/   models/mnist_discri/
Download those models from https://drive.google.com/file/d/1gXxbzZ7MNPPkcxDIpUDrH5m21Q1QT962/view?usp=sharing
Modified traindir to locate the path to MNIST dataset
*/

val traindir = "/data/data/MNIST/"
val pretrain_model_dir = "models/mnist/"
val pretrain_discriminator_dir = "models/mnist_discri/"


val train0 =       loadIDX(traindir+"train-images-idx3-ubyte").reshapeView(1,28,28,60000);
val trainlabels0 = loadIDX(traindir+"train-labels-idx1-ubyte").reshapeView(1,60000);
val test =         loadIDX(traindir+"t10k-images-idx3-ubyte").reshapeView(1,28,28,10000);
val testlabels =   loadIDX(traindir+"t10k-labels-idx1-ubyte").reshapeView(1,10000);

val rp = randperm(60000);
val train = train0(?,?,?,rp);
val trainlabels = trainlabels0(?,rp);

val mt = train.mean(irow(3));
train ~ train - mt;
test ~ test - mt;

val (nn,opts) = Net.learner(train,trainlabels);
    
val convt = jcuda.jcudnn.cudnnConvolutionMode.CUDNN_CROSS_CORRELATION


opts.batchSize= 100
opts.npasses = 1000
opts.lrate = 1e-4f 
opts.texp = 0.1f
opts.pstep = 0.1f
opts.hasBias = true;
//opts.lookahead = 0;
opts.autoReset = false;
opts.tensorFormat = Net.TensorNCHW;

{
    import BIDMach.networks.layers.Node._;
    Net.initDefaultNodeSet;
    val in = input;
    //val rin = relu(in)()
    //val scalef = constant(row(1f/256));
    //val inscale = rin *@ scalef

    val conv1 = conv(in)(w=5,h=5,nch=6,stride=1,pad=2,convType=convt,initfn=Net.gaussian, initv=0.1f,initbiasv=0.1f);
    val pool1 = pool(conv1)(w=2,h=2,stride=2,pad=0);
    val bns1 = batchNormScale(pool1)();
    val relu1 = relu(bns1)();

    val conv2 = conv(relu1)(w=5,h=5,nch=16,stride=1,pad=2,convType=convt,initfn=Net.gaussian, initv=0.1f,initbiasv=0.1f);   
    val pool2 = pool(conv2)(w=2,h=2,stride=2,pad=0);
    val bns2 = batchNormScale(pool2)();
    val relu2 = relu(bns2)();

    val fc3 = linear(relu2)(outdim=120,initfn=Net.gaussian, initv=0.1f,initbiasv=0.1f);
    val relu3 = relu(fc3)();

    val fc4 = linear(relu3)(outdim=84,initfn=Net.gaussian, initv=0.1f,initbiasv=0.1f);
    val relu4  = relu(fc4)();

    val fc5  = linear(relu4)(outdim=10,initfn=Net.gaussian, initv=0.1f,initbiasv=0.1f);
    val out = softmaxout(fc5)(scoreType=1);
    opts.nodeset=Net.getDefaultNodeSet
}

val model = nn.model.asInstanceOf[Net];
nn.launchTrain;
nn.pause
import BIDMach.viz._
import BIDMach.networks.layers._

//val v = nn.add_plot(new FilterViz(1,bw=5)).asInstanceOf[FilterViz]

:load scripts/viz/save.ssc
load(model,pretrain_model_dir)

val s = new Synthesis("mnist")
val o = s.opts
o.realImagesPath = traindir;
o.pretrainedDiscriminatorPath = pretrain_discriminator_dir;
s.init(model,null);
s.mcmc(model)

val ii = IMat(FMat(model.layers(14).target + irow(0->100)*10))
o.derivFunc = (a:Layer)=>{val m = a.deriv;m.set(0f);m(ii)=1f}
o.endLayer = 13
o.printInfo = false
o.displayAveraging = true
o.averagingTime = 1f
o.resetInterval=1000000000
o.updateInterval = 10

def setConv(filter:Int) = {
    val func : Layer => Unit = (layer:Layer) => {
        val dims = layer.deriv.dims;
        layer.deriv.set(0);
        layer.deriv.reshapeView(dims(1),dims(2),dims(0),dims(3))(?,?,filter,?)=1f;
    }
    func
}

def setConvI(filter:Int,x:Int = 7,y:Int = 7) = {
    val func : Layer => Unit = (layer:Layer) => {
        val dims = layer.deriv.dims;
        layer.deriv.set(0);
        layer.deriv.reshapeView(dims(1),dims(2),dims(0),dims(3))(x,y,filter,0->50)=1f;
        layer.deriv.reshapeView(dims(1),dims(2),dims(0),dims(3))(x,y,filter,50->100)=1f;
    }
    func
}

def test(){
    val test =         loadIDX(traindir+"t10k-images-idx3-ubyte").reshapeView(1,28,28,10000);
    val testlabels =   loadIDX(traindir+"t10k-labels-idx1-ubyte").reshapeView(1,10000);
    val (mm, mopts) =  Net.predictor(model, test, testlabels);
    mopts.pstep = 0.2f
    mopts.autoReset = false;

    val mmodel = mm.model.asInstanceOf[Net];
    mm.predict;

    println("Accuracy = %f" format mean(mm.results(0,?),2).v);
}


:silent





