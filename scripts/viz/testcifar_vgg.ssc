:silent

import jcuda.jcudnn._


val pretrain_model_dir = "models/cifar_vgg/"
val pretrain_discriminator_dir = "models/cifar_discri2/"

val datadir = "/data/mcmc/data/CIFAR10/parts/"
val trainfname = datadir + "trainNCHW%d.fmat.lz4";
val labelsfname = datadir + "labels%d.imat.lz4";
val testfname = datadir + "testNCHW%d.fmat.lz4";
val testlabelsfname = datadir + "testlabels%d.imat.lz4";
val predsfname = datadir + "preds%d.fmat.lz4";

val (nn,opts) = Net.learner(trainfname,labelsfname);

val convt = jcuda.jcudnn.cudnnConvolutionMode.CUDNN_CROSS_CORRELATION


opts.batchSize= 100
opts.npasses = 1000
opts.lrate = 1e-4f 

opts.vel_decay = 0.9f
opts.gsq_decay = 0.99f
opts.texp = 0.0f
opts.pstep = 0.1f
opts.hasBias = true;
opts.tensorFormat = Net.TensorNCHW;
opts.autoReset = false;
opts.debugMem = false;

{
    import BIDMach.networks.layers.Node._;
    import BIDMach.networks.layers.NodeTerm
    Net.initDefaultNodeSet;

    val in = input;
    val scalef = constant(row(0.01f));
    val inscale = in *@ scalef
    
    var layer:NodeTerm = inscale
    val config = List(64, 64, 0, 128, 128, 0, 256, 256, 256, 0, 512, 512, 512, 0, 512, 512, 512, 0)
    
    for(i<-config){
        if (i == 0) {
            layer = pool(layer)(w=2,h=2,stride=2)
        }
        else {
            layer = conv(layer)(w=3,h=3,nch=i,stride=1,pad=1,initv=0.01f,convType=convt);
            layer = batchNormScale(layer)();
            layer = relu(layer)();
        }
    }

    val fc =   linear(layer)(outdim=10,initv=1e-1f);
    val out =   softmaxout(fc)(scoreType=1); 

    opts.nodeset=Net.getDefaultNodeSet
}


//opts.nodemat = nodes;
val model = nn.model.asInstanceOf[Net];
nn.launchTrain;

import BIDMach.viz._
import BIDMach.networks.layers._
//val v = nn.add_plot(new FilterViz(3,bw=5)).asInstanceOf[FilterViz]
//v.interval = 100

def load(net:Net,fname:String) {
    for (i <- 0 until net.modelmats.length) {
        val data = loadMat(fname+"modelmat%02d.lz4" format i);
        net.modelmats(i)<--data
    }
}

nn.pause
Thread.sleep(1000)
val s = new Synthesis("cifar")
val o = s.opts
load(model,pretrain_model_dir)
o.endLayer = -2
o.guidebp = false
o.realImagesPath = datadir
o.pretrainedDiscriminatorPath = pretrain_discriminator_dir
//o.wClip = 0.01f
s.init(model,null)
//o.base = 0
//o.scale = 1
o.iter=4
//o.langevin = 0
//o.dWeight=0.5f
s.mcmc(model)
val ii = IMat(FMat(model.layers(model.layers.length-1).target + irow(0->100)*10))
o.derivFunc = (a:Layer)=>{val m = a.deriv;m.set(0f);m(ii)=1f}
o.printInfo = false

:silent

def reset() {
    val ii = IMat(FMat(model.layers(12).target + irow(0->100)*10))
    o.derivFunc = (a:Layer)=>{val m = a.deriv;m.set(0f);m(ii)=1f}
    o.endLayer = 11;
}

var threhold=1;

