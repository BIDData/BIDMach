val classNames = scala.io.Source.fromFile("models/imagenet.txt").getLines.map(_.split(": ")(1)).toList

val m = net.modelmats(net.modelmats.length-2);

val dis = m*^m;

val (v,i) = sortdown2(dis)

val ii = IMat(cpu(i))

def p(id:Int) = {
    println(classNames(id))
    ii(0->10,id).data.map(x=>(x,classNames(x))).toList
}

def diff2(i:Int,j:Int) = {
    val (v,ii) = sortdown2(abs(m(i,?)-m(j,?)).t)
    IMat(ii).data.take(10)
}

def diff(i:Int) = {
    diff2(i,ii(1,i))
}

def setDeriv(i:Int) = {
    s.derivFunc = (a:Layer)=>{val m = a.deriv;m.set(0f);m(i,?)=1f}
}

val (_,posClass_) = sortdown2(m);
val posClass = IMat(cpu(posClass_))

val (_,negClass_) = sort2(m);
val negClass = IMat(cpu(negClass_))

def pf(i:Int) = {
    println(posClass(0->10,i).data.map(classNames(_)).toList)
    println(negClass(0->10,i).data.map(classNames(_)).toList)
}

val (_,tmp) = sortdown2(m.t)
val posFeatures = IMat(cpu(tmp))
def pf2(i:Int) = {
    posFeatures(0->10,i).data.toList
}
