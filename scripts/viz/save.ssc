import BIDMach.models._
import BIDMat.MatFunctions._
import BIDMach._

def save(net:Model,fname:String) {
    for (i <- 0 until net.modelmats.length) {
      val mat = net.modelmats(i);
      saveMat(fname+"/modelmat%02d.lz4" format i, cpu(mat));
    }
}

def load(net:Model,fname:String) {
    for (i <- 0 until net.modelmats.length) {
        val data = loadMat(fname+"/modelmat%02d.lz4" format i);
        net.modelmats(i)<--data
    }
}

def savenn(nn:Learner,fname:String) {
    val net = nn.model
    for (i <- 0 until net.modelmats.length) {
      val mat = net.modelmats(i);
      saveMat(fname+"/modelmat%02d.lz4" format i, cpu(mat));
    }
    val tc = row(nn.resTlist.map(_.v).grouped(interval).map(x=>x.sum/x.length).toArray)
    val vc = row( nn.reslist.map(_.v).grouped(interval).map(x=>x.sum/x.length).toArray)
    saveMat(fname+"/training_curve.lz4", tc);
    saveMat(fname+"/validation_curve.lz4", tc);
}

def loadnn(nn:Learner,fname:String,print:Boolean = true) {
    val net = nn.model  
    for (i <- 0 until net.modelmats.length) {
        val data = loadMat(fname+"/modelmat%02d.lz4" format i);
        net.modelmats(i)<--data
    }
    if (print){
        val tc = loadMat(fname+"/training_curve.lz4");
        val vc = loadMat(fname+"/validation_curve.lz4");
        plot(tc)
        plot(vc)
    }
}