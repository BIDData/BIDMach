// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx/onnx-operators.proto

package onnx;

public final class OnnxOperators {
  private OnnxOperators() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code onnx.OperatorStatus}
   *
   * <pre>
   * Operator/function status.
   * </pre>
   */
  public enum OperatorStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EXPERIMENTAL = 0;</code>
     */
    EXPERIMENTAL(0, 0),
    /**
     * <code>STABLE = 1;</code>
     */
    STABLE(1, 1),
    ;

    /**
     * <code>EXPERIMENTAL = 0;</code>
     */
    public static final int EXPERIMENTAL_VALUE = 0;
    /**
     * <code>STABLE = 1;</code>
     */
    public static final int STABLE_VALUE = 1;


    public final int getNumber() { return value; }

    public static OperatorStatus valueOf(int value) {
      switch (value) {
        case 0: return EXPERIMENTAL;
        case 1: return STABLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OperatorStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<OperatorStatus>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OperatorStatus>() {
            public OperatorStatus findValueByNumber(int number) {
              return OperatorStatus.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return onnx.OnnxOperators.getDescriptor().getEnumTypes().get(0);
    }

    private static final OperatorStatus[] VALUES = values();

    public static OperatorStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private OperatorStatus(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:onnx.OperatorStatus)
  }

  public interface FunctionProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:onnx.FunctionProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the function, similar usage of op_type in OperatorProto.
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the function, similar usage of op_type in OperatorProto.
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the function, similar usage of op_type in OperatorProto.
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional int64 since_version = 2;</code>
     *
     * <pre>
     * The first version of a function set which contains this function.
     * When there's any breaking change for this function, the function set
     * contains the function needs to bump its version, and since_version of
     * the updated function will be changed to the updated function set version.  
     * </pre>
     */
    boolean hasSinceVersion();
    /**
     * <code>optional int64 since_version = 2;</code>
     *
     * <pre>
     * The first version of a function set which contains this function.
     * When there's any breaking change for this function, the function set
     * contains the function needs to bump its version, and since_version of
     * the updated function will be changed to the updated function set version.  
     * </pre>
     */
    long getSinceVersion();

    /**
     * <code>optional .onnx.OperatorStatus status = 3;</code>
     *
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this function is in an experimental or stable stage. Once an
     * function is published as STABLE, its syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When a function is published as EXPERIMENTAL, the syntax and semantics
     * of the function MAY change across operator set versions.
     * Functions "become" stable by deprecating the experimental version and
     * introducing a new stable function with the same name.
     * </pre>
     */
    boolean hasStatus();
    /**
     * <code>optional .onnx.OperatorStatus status = 3;</code>
     *
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this function is in an experimental or stable stage. Once an
     * function is published as STABLE, its syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When a function is published as EXPERIMENTAL, the syntax and semantics
     * of the function MAY change across operator set versions.
     * Functions "become" stable by deprecating the experimental version and
     * introducing a new stable function with the same name.
     * </pre>
     */
    onnx.OnnxOperators.OperatorStatus getStatus();

    /**
     * <code>repeated string input = 4;</code>
     *
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     */
    com.google.protobuf.ProtocolStringList
        getInputList();
    /**
     * <code>repeated string input = 4;</code>
     *
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     */
    int getInputCount();
    /**
     * <code>repeated string input = 4;</code>
     *
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     */
    java.lang.String getInput(int index);
    /**
     * <code>repeated string input = 4;</code>
     *
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     */
    com.google.protobuf.ByteString
        getInputBytes(int index);

    /**
     * <code>repeated string output = 5;</code>
     */
    com.google.protobuf.ProtocolStringList
        getOutputList();
    /**
     * <code>repeated string output = 5;</code>
     */
    int getOutputCount();
    /**
     * <code>repeated string output = 5;</code>
     */
    java.lang.String getOutput(int index);
    /**
     * <code>repeated string output = 5;</code>
     */
    com.google.protobuf.ByteString
        getOutputBytes(int index);

    /**
     * <code>repeated string attribute = 6;</code>
     *
     * <pre>
     * The attributes of the function.
     * </pre>
     */
    com.google.protobuf.ProtocolStringList
        getAttributeList();
    /**
     * <code>repeated string attribute = 6;</code>
     *
     * <pre>
     * The attributes of the function.
     * </pre>
     */
    int getAttributeCount();
    /**
     * <code>repeated string attribute = 6;</code>
     *
     * <pre>
     * The attributes of the function.
     * </pre>
     */
    java.lang.String getAttribute(int index);
    /**
     * <code>repeated string attribute = 6;</code>
     *
     * <pre>
     * The attributes of the function.
     * </pre>
     */
    com.google.protobuf.ByteString
        getAttributeBytes(int index);

    /**
     * <code>repeated .onnx.NodeProto node = 7;</code>
     *
     * <pre>
     * The nodes in the function.
     * </pre>
     */
    java.util.List<onnx.Onnx.NodeProto> 
        getNodeList();
    /**
     * <code>repeated .onnx.NodeProto node = 7;</code>
     *
     * <pre>
     * The nodes in the function.
     * </pre>
     */
    onnx.Onnx.NodeProto getNode(int index);
    /**
     * <code>repeated .onnx.NodeProto node = 7;</code>
     *
     * <pre>
     * The nodes in the function.
     * </pre>
     */
    int getNodeCount();
    /**
     * <code>repeated .onnx.NodeProto node = 7;</code>
     *
     * <pre>
     * The nodes in the function.
     * </pre>
     */
    java.util.List<? extends onnx.Onnx.NodeProtoOrBuilder> 
        getNodeOrBuilderList();
    /**
     * <code>repeated .onnx.NodeProto node = 7;</code>
     *
     * <pre>
     * The nodes in the function.
     * </pre>
     */
    onnx.Onnx.NodeProtoOrBuilder getNodeOrBuilder(
        int index);

    /**
     * <code>optional string doc_string = 8;</code>
     *
     * <pre>
     * A human-readable documentation for this function. Markdown is allowed.
     * </pre>
     */
    boolean hasDocString();
    /**
     * <code>optional string doc_string = 8;</code>
     *
     * <pre>
     * A human-readable documentation for this function. Markdown is allowed.
     * </pre>
     */
    java.lang.String getDocString();
    /**
     * <code>optional string doc_string = 8;</code>
     *
     * <pre>
     * A human-readable documentation for this function. Markdown is allowed.
     * </pre>
     */
    com.google.protobuf.ByteString
        getDocStringBytes();
  }
  /**
   * Protobuf type {@code onnx.FunctionProto}
   */
  public static final class FunctionProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:onnx.FunctionProto)
      FunctionProtoOrBuilder {
    // Use FunctionProto.newBuilder() to construct.
    private FunctionProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FunctionProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FunctionProto defaultInstance;
    public static FunctionProto getDefaultInstance() {
      return defaultInstance;
    }

    public FunctionProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FunctionProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              sinceVersion_ = input.readInt64();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              onnx.OnnxOperators.OperatorStatus value = onnx.OnnxOperators.OperatorStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                status_ = value;
              }
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                input_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000008;
              }
              input_.add(bs);
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                output_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000010;
              }
              output_.add(bs);
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                attribute_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000020;
              }
              attribute_.add(bs);
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                node_ = new java.util.ArrayList<onnx.Onnx.NodeProto>();
                mutable_bitField0_ |= 0x00000040;
              }
              node_.add(input.readMessage(onnx.Onnx.NodeProto.PARSER, extensionRegistry));
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              docString_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          input_ = input_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          output_ = output_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          attribute_ = attribute_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          node_ = java.util.Collections.unmodifiableList(node_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return onnx.OnnxOperators.internal_static_onnx_FunctionProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return onnx.OnnxOperators.internal_static_onnx_FunctionProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              onnx.OnnxOperators.FunctionProto.class, onnx.OnnxOperators.FunctionProto.Builder.class);
    }

    public static com.google.protobuf.Parser<FunctionProto> PARSER =
        new com.google.protobuf.AbstractParser<FunctionProto>() {
      public FunctionProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FunctionProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FunctionProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the function, similar usage of op_type in OperatorProto.
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the function, similar usage of op_type in OperatorProto.
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * The name of the function, similar usage of op_type in OperatorProto.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SINCE_VERSION_FIELD_NUMBER = 2;
    private long sinceVersion_;
    /**
     * <code>optional int64 since_version = 2;</code>
     *
     * <pre>
     * The first version of a function set which contains this function.
     * When there's any breaking change for this function, the function set
     * contains the function needs to bump its version, and since_version of
     * the updated function will be changed to the updated function set version.  
     * </pre>
     */
    public boolean hasSinceVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 since_version = 2;</code>
     *
     * <pre>
     * The first version of a function set which contains this function.
     * When there's any breaking change for this function, the function set
     * contains the function needs to bump its version, and since_version of
     * the updated function will be changed to the updated function set version.  
     * </pre>
     */
    public long getSinceVersion() {
      return sinceVersion_;
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private onnx.OnnxOperators.OperatorStatus status_;
    /**
     * <code>optional .onnx.OperatorStatus status = 3;</code>
     *
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this function is in an experimental or stable stage. Once an
     * function is published as STABLE, its syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When a function is published as EXPERIMENTAL, the syntax and semantics
     * of the function MAY change across operator set versions.
     * Functions "become" stable by deprecating the experimental version and
     * introducing a new stable function with the same name.
     * </pre>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .onnx.OperatorStatus status = 3;</code>
     *
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this function is in an experimental or stable stage. Once an
     * function is published as STABLE, its syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When a function is published as EXPERIMENTAL, the syntax and semantics
     * of the function MAY change across operator set versions.
     * Functions "become" stable by deprecating the experimental version and
     * introducing a new stable function with the same name.
     * </pre>
     */
    public onnx.OnnxOperators.OperatorStatus getStatus() {
      return status_;
    }

    public static final int INPUT_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList input_;
    /**
     * <code>repeated string input = 4;</code>
     *
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getInputList() {
      return input_;
    }
    /**
     * <code>repeated string input = 4;</code>
     *
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     */
    public int getInputCount() {
      return input_.size();
    }
    /**
     * <code>repeated string input = 4;</code>
     *
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     */
    public java.lang.String getInput(int index) {
      return input_.get(index);
    }
    /**
     * <code>repeated string input = 4;</code>
     *
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getInputBytes(int index) {
      return input_.getByteString(index);
    }

    public static final int OUTPUT_FIELD_NUMBER = 5;
    private com.google.protobuf.LazyStringList output_;
    /**
     * <code>repeated string output = 5;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getOutputList() {
      return output_;
    }
    /**
     * <code>repeated string output = 5;</code>
     */
    public int getOutputCount() {
      return output_.size();
    }
    /**
     * <code>repeated string output = 5;</code>
     */
    public java.lang.String getOutput(int index) {
      return output_.get(index);
    }
    /**
     * <code>repeated string output = 5;</code>
     */
    public com.google.protobuf.ByteString
        getOutputBytes(int index) {
      return output_.getByteString(index);
    }

    public static final int ATTRIBUTE_FIELD_NUMBER = 6;
    private com.google.protobuf.LazyStringList attribute_;
    /**
     * <code>repeated string attribute = 6;</code>
     *
     * <pre>
     * The attributes of the function.
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getAttributeList() {
      return attribute_;
    }
    /**
     * <code>repeated string attribute = 6;</code>
     *
     * <pre>
     * The attributes of the function.
     * </pre>
     */
    public int getAttributeCount() {
      return attribute_.size();
    }
    /**
     * <code>repeated string attribute = 6;</code>
     *
     * <pre>
     * The attributes of the function.
     * </pre>
     */
    public java.lang.String getAttribute(int index) {
      return attribute_.get(index);
    }
    /**
     * <code>repeated string attribute = 6;</code>
     *
     * <pre>
     * The attributes of the function.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getAttributeBytes(int index) {
      return attribute_.getByteString(index);
    }

    public static final int NODE_FIELD_NUMBER = 7;
    private java.util.List<onnx.Onnx.NodeProto> node_;
    /**
     * <code>repeated .onnx.NodeProto node = 7;</code>
     *
     * <pre>
     * The nodes in the function.
     * </pre>
     */
    public java.util.List<onnx.Onnx.NodeProto> getNodeList() {
      return node_;
    }
    /**
     * <code>repeated .onnx.NodeProto node = 7;</code>
     *
     * <pre>
     * The nodes in the function.
     * </pre>
     */
    public java.util.List<? extends onnx.Onnx.NodeProtoOrBuilder> 
        getNodeOrBuilderList() {
      return node_;
    }
    /**
     * <code>repeated .onnx.NodeProto node = 7;</code>
     *
     * <pre>
     * The nodes in the function.
     * </pre>
     */
    public int getNodeCount() {
      return node_.size();
    }
    /**
     * <code>repeated .onnx.NodeProto node = 7;</code>
     *
     * <pre>
     * The nodes in the function.
     * </pre>
     */
    public onnx.Onnx.NodeProto getNode(int index) {
      return node_.get(index);
    }
    /**
     * <code>repeated .onnx.NodeProto node = 7;</code>
     *
     * <pre>
     * The nodes in the function.
     * </pre>
     */
    public onnx.Onnx.NodeProtoOrBuilder getNodeOrBuilder(
        int index) {
      return node_.get(index);
    }

    public static final int DOC_STRING_FIELD_NUMBER = 8;
    private java.lang.Object docString_;
    /**
     * <code>optional string doc_string = 8;</code>
     *
     * <pre>
     * A human-readable documentation for this function. Markdown is allowed.
     * </pre>
     */
    public boolean hasDocString() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string doc_string = 8;</code>
     *
     * <pre>
     * A human-readable documentation for this function. Markdown is allowed.
     * </pre>
     */
    public java.lang.String getDocString() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          docString_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string doc_string = 8;</code>
     *
     * <pre>
     * A human-readable documentation for this function. Markdown is allowed.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDocStringBytes() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        docString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      name_ = "";
      sinceVersion_ = 0L;
      status_ = onnx.OnnxOperators.OperatorStatus.EXPERIMENTAL;
      input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      output_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      attribute_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      node_ = java.util.Collections.emptyList();
      docString_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, sinceVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, status_.getNumber());
      }
      for (int i = 0; i < input_.size(); i++) {
        output.writeBytes(4, input_.getByteString(i));
      }
      for (int i = 0; i < output_.size(); i++) {
        output.writeBytes(5, output_.getByteString(i));
      }
      for (int i = 0; i < attribute_.size(); i++) {
        output.writeBytes(6, attribute_.getByteString(i));
      }
      for (int i = 0; i < node_.size(); i++) {
        output.writeMessage(7, node_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(8, getDocStringBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, sinceVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_.getNumber());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < input_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(input_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getInputList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < output_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(output_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getOutputList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < attribute_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(attribute_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getAttributeList().size();
      }
      for (int i = 0; i < node_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, node_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getDocStringBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static onnx.OnnxOperators.FunctionProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static onnx.OnnxOperators.FunctionProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static onnx.OnnxOperators.FunctionProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static onnx.OnnxOperators.FunctionProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static onnx.OnnxOperators.FunctionProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static onnx.OnnxOperators.FunctionProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static onnx.OnnxOperators.FunctionProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static onnx.OnnxOperators.FunctionProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static onnx.OnnxOperators.FunctionProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static onnx.OnnxOperators.FunctionProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(onnx.OnnxOperators.FunctionProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code onnx.FunctionProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:onnx.FunctionProto)
        onnx.OnnxOperators.FunctionProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return onnx.OnnxOperators.internal_static_onnx_FunctionProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return onnx.OnnxOperators.internal_static_onnx_FunctionProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                onnx.OnnxOperators.FunctionProto.class, onnx.OnnxOperators.FunctionProto.Builder.class);
      }

      // Construct using onnx.OnnxOperators.FunctionProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getNodeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        sinceVersion_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        status_ = onnx.OnnxOperators.OperatorStatus.EXPERIMENTAL;
        bitField0_ = (bitField0_ & ~0x00000004);
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        output_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        attribute_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (nodeBuilder_ == null) {
          node_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          nodeBuilder_.clear();
        }
        docString_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return onnx.OnnxOperators.internal_static_onnx_FunctionProto_descriptor;
      }

      public onnx.OnnxOperators.FunctionProto getDefaultInstanceForType() {
        return onnx.OnnxOperators.FunctionProto.getDefaultInstance();
      }

      public onnx.OnnxOperators.FunctionProto build() {
        onnx.OnnxOperators.FunctionProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public onnx.OnnxOperators.FunctionProto buildPartial() {
        onnx.OnnxOperators.FunctionProto result = new onnx.OnnxOperators.FunctionProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sinceVersion_ = sinceVersion_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.status_ = status_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          input_ = input_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.input_ = input_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output_ = output_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.output_ = output_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          attribute_ = attribute_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.attribute_ = attribute_;
        if (nodeBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            node_ = java.util.Collections.unmodifiableList(node_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.node_ = node_;
        } else {
          result.node_ = nodeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000008;
        }
        result.docString_ = docString_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof onnx.OnnxOperators.FunctionProto) {
          return mergeFrom((onnx.OnnxOperators.FunctionProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(onnx.OnnxOperators.FunctionProto other) {
        if (other == onnx.OnnxOperators.FunctionProto.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasSinceVersion()) {
          setSinceVersion(other.getSinceVersion());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (!other.input_.isEmpty()) {
          if (input_.isEmpty()) {
            input_ = other.input_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureInputIsMutable();
            input_.addAll(other.input_);
          }
          onChanged();
        }
        if (!other.output_.isEmpty()) {
          if (output_.isEmpty()) {
            output_ = other.output_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureOutputIsMutable();
            output_.addAll(other.output_);
          }
          onChanged();
        }
        if (!other.attribute_.isEmpty()) {
          if (attribute_.isEmpty()) {
            attribute_ = other.attribute_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureAttributeIsMutable();
            attribute_.addAll(other.attribute_);
          }
          onChanged();
        }
        if (nodeBuilder_ == null) {
          if (!other.node_.isEmpty()) {
            if (node_.isEmpty()) {
              node_ = other.node_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureNodeIsMutable();
              node_.addAll(other.node_);
            }
            onChanged();
          }
        } else {
          if (!other.node_.isEmpty()) {
            if (nodeBuilder_.isEmpty()) {
              nodeBuilder_.dispose();
              nodeBuilder_ = null;
              node_ = other.node_;
              bitField0_ = (bitField0_ & ~0x00000040);
              nodeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getNodeFieldBuilder() : null;
            } else {
              nodeBuilder_.addAllMessages(other.node_);
            }
          }
        }
        if (other.hasDocString()) {
          bitField0_ |= 0x00000080;
          docString_ = other.docString_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        onnx.OnnxOperators.FunctionProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (onnx.OnnxOperators.FunctionProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The name of the function, similar usage of op_type in OperatorProto.
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The name of the function, similar usage of op_type in OperatorProto.
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The name of the function, similar usage of op_type in OperatorProto.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The name of the function, similar usage of op_type in OperatorProto.
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The name of the function, similar usage of op_type in OperatorProto.
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * The name of the function, similar usage of op_type in OperatorProto.
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private long sinceVersion_ ;
      /**
       * <code>optional int64 since_version = 2;</code>
       *
       * <pre>
       * The first version of a function set which contains this function.
       * When there's any breaking change for this function, the function set
       * contains the function needs to bump its version, and since_version of
       * the updated function will be changed to the updated function set version.  
       * </pre>
       */
      public boolean hasSinceVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 since_version = 2;</code>
       *
       * <pre>
       * The first version of a function set which contains this function.
       * When there's any breaking change for this function, the function set
       * contains the function needs to bump its version, and since_version of
       * the updated function will be changed to the updated function set version.  
       * </pre>
       */
      public long getSinceVersion() {
        return sinceVersion_;
      }
      /**
       * <code>optional int64 since_version = 2;</code>
       *
       * <pre>
       * The first version of a function set which contains this function.
       * When there's any breaking change for this function, the function set
       * contains the function needs to bump its version, and since_version of
       * the updated function will be changed to the updated function set version.  
       * </pre>
       */
      public Builder setSinceVersion(long value) {
        bitField0_ |= 0x00000002;
        sinceVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 since_version = 2;</code>
       *
       * <pre>
       * The first version of a function set which contains this function.
       * When there's any breaking change for this function, the function set
       * contains the function needs to bump its version, and since_version of
       * the updated function will be changed to the updated function set version.  
       * </pre>
       */
      public Builder clearSinceVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sinceVersion_ = 0L;
        onChanged();
        return this;
      }

      private onnx.OnnxOperators.OperatorStatus status_ = onnx.OnnxOperators.OperatorStatus.EXPERIMENTAL;
      /**
       * <code>optional .onnx.OperatorStatus status = 3;</code>
       *
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this function is in an experimental or stable stage. Once an
       * function is published as STABLE, its syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When a function is published as EXPERIMENTAL, the syntax and semantics
       * of the function MAY change across operator set versions.
       * Functions "become" stable by deprecating the experimental version and
       * introducing a new stable function with the same name.
       * </pre>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .onnx.OperatorStatus status = 3;</code>
       *
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this function is in an experimental or stable stage. Once an
       * function is published as STABLE, its syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When a function is published as EXPERIMENTAL, the syntax and semantics
       * of the function MAY change across operator set versions.
       * Functions "become" stable by deprecating the experimental version and
       * introducing a new stable function with the same name.
       * </pre>
       */
      public onnx.OnnxOperators.OperatorStatus getStatus() {
        return status_;
      }
      /**
       * <code>optional .onnx.OperatorStatus status = 3;</code>
       *
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this function is in an experimental or stable stage. Once an
       * function is published as STABLE, its syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When a function is published as EXPERIMENTAL, the syntax and semantics
       * of the function MAY change across operator set versions.
       * Functions "become" stable by deprecating the experimental version and
       * introducing a new stable function with the same name.
       * </pre>
       */
      public Builder setStatus(onnx.OnnxOperators.OperatorStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .onnx.OperatorStatus status = 3;</code>
       *
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this function is in an experimental or stable stage. Once an
       * function is published as STABLE, its syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When a function is published as EXPERIMENTAL, the syntax and semantics
       * of the function MAY change across operator set versions.
       * Functions "become" stable by deprecating the experimental version and
       * introducing a new stable function with the same name.
       * </pre>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000004);
        status_ = onnx.OnnxOperators.OperatorStatus.EXPERIMENTAL;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureInputIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          input_ = new com.google.protobuf.LazyStringArrayList(input_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated string input = 4;</code>
       *
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       */
      public com.google.protobuf.ProtocolStringList
          getInputList() {
        return input_.getUnmodifiableView();
      }
      /**
       * <code>repeated string input = 4;</code>
       *
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       */
      public int getInputCount() {
        return input_.size();
      }
      /**
       * <code>repeated string input = 4;</code>
       *
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       */
      public java.lang.String getInput(int index) {
        return input_.get(index);
      }
      /**
       * <code>repeated string input = 4;</code>
       *
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getInputBytes(int index) {
        return input_.getByteString(index);
      }
      /**
       * <code>repeated string input = 4;</code>
       *
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       */
      public Builder setInput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 4;</code>
       *
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       */
      public Builder addInput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 4;</code>
       *
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       */
      public Builder addAllInput(
          java.lang.Iterable<java.lang.String> values) {
        ensureInputIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, input_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 4;</code>
       *
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       */
      public Builder clearInput() {
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 4;</code>
       *
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       */
      public Builder addInputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList output_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureOutputIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          output_ = new com.google.protobuf.LazyStringArrayList(output_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getOutputList() {
        return output_.getUnmodifiableView();
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public int getOutputCount() {
        return output_.size();
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public java.lang.String getOutput(int index) {
        return output_.get(index);
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public com.google.protobuf.ByteString
          getOutputBytes(int index) {
        return output_.getByteString(index);
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public Builder setOutput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputIsMutable();
        output_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public Builder addOutput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputIsMutable();
        output_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public Builder addAllOutput(
          java.lang.Iterable<java.lang.String> values) {
        ensureOutputIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, output_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public Builder clearOutput() {
        output_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public Builder addOutputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputIsMutable();
        output_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList attribute_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureAttributeIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          attribute_ = new com.google.protobuf.LazyStringArrayList(attribute_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated string attribute = 6;</code>
       *
       * <pre>
       * The attributes of the function.
       * </pre>
       */
      public com.google.protobuf.ProtocolStringList
          getAttributeList() {
        return attribute_.getUnmodifiableView();
      }
      /**
       * <code>repeated string attribute = 6;</code>
       *
       * <pre>
       * The attributes of the function.
       * </pre>
       */
      public int getAttributeCount() {
        return attribute_.size();
      }
      /**
       * <code>repeated string attribute = 6;</code>
       *
       * <pre>
       * The attributes of the function.
       * </pre>
       */
      public java.lang.String getAttribute(int index) {
        return attribute_.get(index);
      }
      /**
       * <code>repeated string attribute = 6;</code>
       *
       * <pre>
       * The attributes of the function.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getAttributeBytes(int index) {
        return attribute_.getByteString(index);
      }
      /**
       * <code>repeated string attribute = 6;</code>
       *
       * <pre>
       * The attributes of the function.
       * </pre>
       */
      public Builder setAttribute(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAttributeIsMutable();
        attribute_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string attribute = 6;</code>
       *
       * <pre>
       * The attributes of the function.
       * </pre>
       */
      public Builder addAttribute(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAttributeIsMutable();
        attribute_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string attribute = 6;</code>
       *
       * <pre>
       * The attributes of the function.
       * </pre>
       */
      public Builder addAllAttribute(
          java.lang.Iterable<java.lang.String> values) {
        ensureAttributeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, attribute_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string attribute = 6;</code>
       *
       * <pre>
       * The attributes of the function.
       * </pre>
       */
      public Builder clearAttribute() {
        attribute_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string attribute = 6;</code>
       *
       * <pre>
       * The attributes of the function.
       * </pre>
       */
      public Builder addAttributeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAttributeIsMutable();
        attribute_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<onnx.Onnx.NodeProto> node_ =
        java.util.Collections.emptyList();
      private void ensureNodeIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          node_ = new java.util.ArrayList<onnx.Onnx.NodeProto>(node_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          onnx.Onnx.NodeProto, onnx.Onnx.NodeProto.Builder, onnx.Onnx.NodeProtoOrBuilder> nodeBuilder_;

      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public java.util.List<onnx.Onnx.NodeProto> getNodeList() {
        if (nodeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(node_);
        } else {
          return nodeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public int getNodeCount() {
        if (nodeBuilder_ == null) {
          return node_.size();
        } else {
          return nodeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public onnx.Onnx.NodeProto getNode(int index) {
        if (nodeBuilder_ == null) {
          return node_.get(index);
        } else {
          return nodeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public Builder setNode(
          int index, onnx.Onnx.NodeProto value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodeIsMutable();
          node_.set(index, value);
          onChanged();
        } else {
          nodeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public Builder setNode(
          int index, onnx.Onnx.NodeProto.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.set(index, builderForValue.build());
          onChanged();
        } else {
          nodeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public Builder addNode(onnx.Onnx.NodeProto value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodeIsMutable();
          node_.add(value);
          onChanged();
        } else {
          nodeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public Builder addNode(
          int index, onnx.Onnx.NodeProto value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodeIsMutable();
          node_.add(index, value);
          onChanged();
        } else {
          nodeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public Builder addNode(
          onnx.Onnx.NodeProto.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.add(builderForValue.build());
          onChanged();
        } else {
          nodeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public Builder addNode(
          int index, onnx.Onnx.NodeProto.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.add(index, builderForValue.build());
          onChanged();
        } else {
          nodeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public Builder addAllNode(
          java.lang.Iterable<? extends onnx.Onnx.NodeProto> values) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, node_);
          onChanged();
        } else {
          nodeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public Builder clearNode() {
        if (nodeBuilder_ == null) {
          node_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          nodeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public Builder removeNode(int index) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.remove(index);
          onChanged();
        } else {
          nodeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public onnx.Onnx.NodeProto.Builder getNodeBuilder(
          int index) {
        return getNodeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public onnx.Onnx.NodeProtoOrBuilder getNodeOrBuilder(
          int index) {
        if (nodeBuilder_ == null) {
          return node_.get(index);  } else {
          return nodeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public java.util.List<? extends onnx.Onnx.NodeProtoOrBuilder> 
           getNodeOrBuilderList() {
        if (nodeBuilder_ != null) {
          return nodeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(node_);
        }
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public onnx.Onnx.NodeProto.Builder addNodeBuilder() {
        return getNodeFieldBuilder().addBuilder(
            onnx.Onnx.NodeProto.getDefaultInstance());
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public onnx.Onnx.NodeProto.Builder addNodeBuilder(
          int index) {
        return getNodeFieldBuilder().addBuilder(
            index, onnx.Onnx.NodeProto.getDefaultInstance());
      }
      /**
       * <code>repeated .onnx.NodeProto node = 7;</code>
       *
       * <pre>
       * The nodes in the function.
       * </pre>
       */
      public java.util.List<onnx.Onnx.NodeProto.Builder> 
           getNodeBuilderList() {
        return getNodeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          onnx.Onnx.NodeProto, onnx.Onnx.NodeProto.Builder, onnx.Onnx.NodeProtoOrBuilder> 
          getNodeFieldBuilder() {
        if (nodeBuilder_ == null) {
          nodeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              onnx.Onnx.NodeProto, onnx.Onnx.NodeProto.Builder, onnx.Onnx.NodeProtoOrBuilder>(
                  node_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          node_ = null;
        }
        return nodeBuilder_;
      }

      private java.lang.Object docString_ = "";
      /**
       * <code>optional string doc_string = 8;</code>
       *
       * <pre>
       * A human-readable documentation for this function. Markdown is allowed.
       * </pre>
       */
      public boolean hasDocString() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string doc_string = 8;</code>
       *
       * <pre>
       * A human-readable documentation for this function. Markdown is allowed.
       * </pre>
       */
      public java.lang.String getDocString() {
        java.lang.Object ref = docString_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            docString_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string doc_string = 8;</code>
       *
       * <pre>
       * A human-readable documentation for this function. Markdown is allowed.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDocStringBytes() {
        java.lang.Object ref = docString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          docString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string doc_string = 8;</code>
       *
       * <pre>
       * A human-readable documentation for this function. Markdown is allowed.
       * </pre>
       */
      public Builder setDocString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        docString_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string doc_string = 8;</code>
       *
       * <pre>
       * A human-readable documentation for this function. Markdown is allowed.
       * </pre>
       */
      public Builder clearDocString() {
        bitField0_ = (bitField0_ & ~0x00000080);
        docString_ = getDefaultInstance().getDocString();
        onChanged();
        return this;
      }
      /**
       * <code>optional string doc_string = 8;</code>
       *
       * <pre>
       * A human-readable documentation for this function. Markdown is allowed.
       * </pre>
       */
      public Builder setDocStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        docString_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:onnx.FunctionProto)
    }

    static {
      defaultInstance = new FunctionProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:onnx.FunctionProto)
  }

  public interface OperatorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:onnx.OperatorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string op_type = 1;</code>
     *
     * <pre>
     * The name of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     */
    boolean hasOpType();
    /**
     * <code>optional string op_type = 1;</code>
     *
     * <pre>
     * The name of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     */
    java.lang.String getOpType();
    /**
     * <code>optional string op_type = 1;</code>
     *
     * <pre>
     * The name of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     */
    com.google.protobuf.ByteString
        getOpTypeBytes();

    /**
     * <code>optional int64 since_version = 2;</code>
     *
     * <pre>
     * The version of the operator set that first introduced this
     * operator. This value MUST be the same value as the
     * opset_version of the operator set that first published this operator.
     * Subsequent versions of the operator set MUST NOT alter the signature
     * or semantics of the operator once published as STABLE.
     * This field MUST be present in this version of the IR.
     * </pre>
     */
    boolean hasSinceVersion();
    /**
     * <code>optional int64 since_version = 2;</code>
     *
     * <pre>
     * The version of the operator set that first introduced this
     * operator. This value MUST be the same value as the
     * opset_version of the operator set that first published this operator.
     * Subsequent versions of the operator set MUST NOT alter the signature
     * or semantics of the operator once published as STABLE.
     * This field MUST be present in this version of the IR.
     * </pre>
     */
    long getSinceVersion();

    /**
     * <code>optional .onnx.OperatorStatus status = 3;</code>
     *
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this operator is in an experimental or stable stage. Once an
     * operator is published as STABLE, it's syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When an operator is published as EXPERIMENTAL, the syntax and semantics
     * of the operator MAY change across operator set versions.
     * Operators "become" stable by deprecating the experimental version and
     * introducing a new stable operator with the same op_type.
     * </pre>
     */
    boolean hasStatus();
    /**
     * <code>optional .onnx.OperatorStatus status = 3;</code>
     *
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this operator is in an experimental or stable stage. Once an
     * operator is published as STABLE, it's syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When an operator is published as EXPERIMENTAL, the syntax and semantics
     * of the operator MAY change across operator set versions.
     * Operators "become" stable by deprecating the experimental version and
     * introducing a new stable operator with the same op_type.
     * </pre>
     */
    onnx.OnnxOperators.OperatorStatus getStatus();

    /**
     * <code>optional string doc_string = 10;</code>
     *
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     */
    boolean hasDocString();
    /**
     * <code>optional string doc_string = 10;</code>
     *
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     */
    java.lang.String getDocString();
    /**
     * <code>optional string doc_string = 10;</code>
     *
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     */
    com.google.protobuf.ByteString
        getDocStringBytes();
  }
  /**
   * Protobuf type {@code onnx.OperatorProto}
   *
   * <pre>
   * An OperatorProto represents the immutable specification of the signature
   * and semantics of an operator.
   * Operators are declared as part of an OperatorSet, which also defines the
   * domain name for the set.
   * Operators are uniquely identified by a three part identifier
   *   (domain, op_type, since_version)
   * where
   *   *domain* is the domain of an operator set that
   *      contains this operator specification.
   *   *op_type* is the name of the operator as referenced by a
   *      NodeProto.op_type
   *   *since_version* is the version of the operator set that
   *      this operator was initially declared in.
   * </pre>
   */
  public static final class OperatorProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:onnx.OperatorProto)
      OperatorProtoOrBuilder {
    // Use OperatorProto.newBuilder() to construct.
    private OperatorProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OperatorProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OperatorProto defaultInstance;
    public static OperatorProto getDefaultInstance() {
      return defaultInstance;
    }

    public OperatorProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OperatorProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              opType_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              sinceVersion_ = input.readInt64();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              onnx.OnnxOperators.OperatorStatus value = onnx.OnnxOperators.OperatorStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                status_ = value;
              }
              break;
            }
            case 82: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              docString_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return onnx.OnnxOperators.internal_static_onnx_OperatorProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return onnx.OnnxOperators.internal_static_onnx_OperatorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              onnx.OnnxOperators.OperatorProto.class, onnx.OnnxOperators.OperatorProto.Builder.class);
    }

    public static com.google.protobuf.Parser<OperatorProto> PARSER =
        new com.google.protobuf.AbstractParser<OperatorProto>() {
      public OperatorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OperatorProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OperatorProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int OP_TYPE_FIELD_NUMBER = 1;
    private java.lang.Object opType_;
    /**
     * <code>optional string op_type = 1;</code>
     *
     * <pre>
     * The name of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     */
    public boolean hasOpType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string op_type = 1;</code>
     *
     * <pre>
     * The name of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     */
    public java.lang.String getOpType() {
      java.lang.Object ref = opType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          opType_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string op_type = 1;</code>
     *
     * <pre>
     * The name of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getOpTypeBytes() {
      java.lang.Object ref = opType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        opType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SINCE_VERSION_FIELD_NUMBER = 2;
    private long sinceVersion_;
    /**
     * <code>optional int64 since_version = 2;</code>
     *
     * <pre>
     * The version of the operator set that first introduced this
     * operator. This value MUST be the same value as the
     * opset_version of the operator set that first published this operator.
     * Subsequent versions of the operator set MUST NOT alter the signature
     * or semantics of the operator once published as STABLE.
     * This field MUST be present in this version of the IR.
     * </pre>
     */
    public boolean hasSinceVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 since_version = 2;</code>
     *
     * <pre>
     * The version of the operator set that first introduced this
     * operator. This value MUST be the same value as the
     * opset_version of the operator set that first published this operator.
     * Subsequent versions of the operator set MUST NOT alter the signature
     * or semantics of the operator once published as STABLE.
     * This field MUST be present in this version of the IR.
     * </pre>
     */
    public long getSinceVersion() {
      return sinceVersion_;
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private onnx.OnnxOperators.OperatorStatus status_;
    /**
     * <code>optional .onnx.OperatorStatus status = 3;</code>
     *
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this operator is in an experimental or stable stage. Once an
     * operator is published as STABLE, it's syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When an operator is published as EXPERIMENTAL, the syntax and semantics
     * of the operator MAY change across operator set versions.
     * Operators "become" stable by deprecating the experimental version and
     * introducing a new stable operator with the same op_type.
     * </pre>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .onnx.OperatorStatus status = 3;</code>
     *
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this operator is in an experimental or stable stage. Once an
     * operator is published as STABLE, it's syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When an operator is published as EXPERIMENTAL, the syntax and semantics
     * of the operator MAY change across operator set versions.
     * Operators "become" stable by deprecating the experimental version and
     * introducing a new stable operator with the same op_type.
     * </pre>
     */
    public onnx.OnnxOperators.OperatorStatus getStatus() {
      return status_;
    }

    public static final int DOC_STRING_FIELD_NUMBER = 10;
    private java.lang.Object docString_;
    /**
     * <code>optional string doc_string = 10;</code>
     *
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     */
    public boolean hasDocString() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string doc_string = 10;</code>
     *
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     */
    public java.lang.String getDocString() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          docString_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string doc_string = 10;</code>
     *
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDocStringBytes() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        docString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      opType_ = "";
      sinceVersion_ = 0L;
      status_ = onnx.OnnxOperators.OperatorStatus.EXPERIMENTAL;
      docString_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getOpTypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, sinceVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, status_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(10, getDocStringBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getOpTypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, sinceVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, getDocStringBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static onnx.OnnxOperators.OperatorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static onnx.OnnxOperators.OperatorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static onnx.OnnxOperators.OperatorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static onnx.OnnxOperators.OperatorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static onnx.OnnxOperators.OperatorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static onnx.OnnxOperators.OperatorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static onnx.OnnxOperators.OperatorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static onnx.OnnxOperators.OperatorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static onnx.OnnxOperators.OperatorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static onnx.OnnxOperators.OperatorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(onnx.OnnxOperators.OperatorProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code onnx.OperatorProto}
     *
     * <pre>
     * An OperatorProto represents the immutable specification of the signature
     * and semantics of an operator.
     * Operators are declared as part of an OperatorSet, which also defines the
     * domain name for the set.
     * Operators are uniquely identified by a three part identifier
     *   (domain, op_type, since_version)
     * where
     *   *domain* is the domain of an operator set that
     *      contains this operator specification.
     *   *op_type* is the name of the operator as referenced by a
     *      NodeProto.op_type
     *   *since_version* is the version of the operator set that
     *      this operator was initially declared in.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:onnx.OperatorProto)
        onnx.OnnxOperators.OperatorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return onnx.OnnxOperators.internal_static_onnx_OperatorProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return onnx.OnnxOperators.internal_static_onnx_OperatorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                onnx.OnnxOperators.OperatorProto.class, onnx.OnnxOperators.OperatorProto.Builder.class);
      }

      // Construct using onnx.OnnxOperators.OperatorProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opType_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        sinceVersion_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        status_ = onnx.OnnxOperators.OperatorStatus.EXPERIMENTAL;
        bitField0_ = (bitField0_ & ~0x00000004);
        docString_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return onnx.OnnxOperators.internal_static_onnx_OperatorProto_descriptor;
      }

      public onnx.OnnxOperators.OperatorProto getDefaultInstanceForType() {
        return onnx.OnnxOperators.OperatorProto.getDefaultInstance();
      }

      public onnx.OnnxOperators.OperatorProto build() {
        onnx.OnnxOperators.OperatorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public onnx.OnnxOperators.OperatorProto buildPartial() {
        onnx.OnnxOperators.OperatorProto result = new onnx.OnnxOperators.OperatorProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opType_ = opType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sinceVersion_ = sinceVersion_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.docString_ = docString_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof onnx.OnnxOperators.OperatorProto) {
          return mergeFrom((onnx.OnnxOperators.OperatorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(onnx.OnnxOperators.OperatorProto other) {
        if (other == onnx.OnnxOperators.OperatorProto.getDefaultInstance()) return this;
        if (other.hasOpType()) {
          bitField0_ |= 0x00000001;
          opType_ = other.opType_;
          onChanged();
        }
        if (other.hasSinceVersion()) {
          setSinceVersion(other.getSinceVersion());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasDocString()) {
          bitField0_ |= 0x00000008;
          docString_ = other.docString_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        onnx.OnnxOperators.OperatorProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (onnx.OnnxOperators.OperatorProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object opType_ = "";
      /**
       * <code>optional string op_type = 1;</code>
       *
       * <pre>
       * The name of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       */
      public boolean hasOpType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string op_type = 1;</code>
       *
       * <pre>
       * The name of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       */
      public java.lang.String getOpType() {
        java.lang.Object ref = opType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            opType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string op_type = 1;</code>
       *
       * <pre>
       * The name of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getOpTypeBytes() {
        java.lang.Object ref = opType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          opType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string op_type = 1;</code>
       *
       * <pre>
       * The name of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       */
      public Builder setOpType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        opType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string op_type = 1;</code>
       *
       * <pre>
       * The name of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       */
      public Builder clearOpType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opType_ = getDefaultInstance().getOpType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string op_type = 1;</code>
       *
       * <pre>
       * The name of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       */
      public Builder setOpTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        opType_ = value;
        onChanged();
        return this;
      }

      private long sinceVersion_ ;
      /**
       * <code>optional int64 since_version = 2;</code>
       *
       * <pre>
       * The version of the operator set that first introduced this
       * operator. This value MUST be the same value as the
       * opset_version of the operator set that first published this operator.
       * Subsequent versions of the operator set MUST NOT alter the signature
       * or semantics of the operator once published as STABLE.
       * This field MUST be present in this version of the IR.
       * </pre>
       */
      public boolean hasSinceVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 since_version = 2;</code>
       *
       * <pre>
       * The version of the operator set that first introduced this
       * operator. This value MUST be the same value as the
       * opset_version of the operator set that first published this operator.
       * Subsequent versions of the operator set MUST NOT alter the signature
       * or semantics of the operator once published as STABLE.
       * This field MUST be present in this version of the IR.
       * </pre>
       */
      public long getSinceVersion() {
        return sinceVersion_;
      }
      /**
       * <code>optional int64 since_version = 2;</code>
       *
       * <pre>
       * The version of the operator set that first introduced this
       * operator. This value MUST be the same value as the
       * opset_version of the operator set that first published this operator.
       * Subsequent versions of the operator set MUST NOT alter the signature
       * or semantics of the operator once published as STABLE.
       * This field MUST be present in this version of the IR.
       * </pre>
       */
      public Builder setSinceVersion(long value) {
        bitField0_ |= 0x00000002;
        sinceVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 since_version = 2;</code>
       *
       * <pre>
       * The version of the operator set that first introduced this
       * operator. This value MUST be the same value as the
       * opset_version of the operator set that first published this operator.
       * Subsequent versions of the operator set MUST NOT alter the signature
       * or semantics of the operator once published as STABLE.
       * This field MUST be present in this version of the IR.
       * </pre>
       */
      public Builder clearSinceVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sinceVersion_ = 0L;
        onChanged();
        return this;
      }

      private onnx.OnnxOperators.OperatorStatus status_ = onnx.OnnxOperators.OperatorStatus.EXPERIMENTAL;
      /**
       * <code>optional .onnx.OperatorStatus status = 3;</code>
       *
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .onnx.OperatorStatus status = 3;</code>
       *
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       */
      public onnx.OnnxOperators.OperatorStatus getStatus() {
        return status_;
      }
      /**
       * <code>optional .onnx.OperatorStatus status = 3;</code>
       *
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       */
      public Builder setStatus(onnx.OnnxOperators.OperatorStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .onnx.OperatorStatus status = 3;</code>
       *
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000004);
        status_ = onnx.OnnxOperators.OperatorStatus.EXPERIMENTAL;
        onChanged();
        return this;
      }

      private java.lang.Object docString_ = "";
      /**
       * <code>optional string doc_string = 10;</code>
       *
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       */
      public boolean hasDocString() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string doc_string = 10;</code>
       *
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       */
      public java.lang.String getDocString() {
        java.lang.Object ref = docString_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            docString_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string doc_string = 10;</code>
       *
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDocStringBytes() {
        java.lang.Object ref = docString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          docString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string doc_string = 10;</code>
       *
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       */
      public Builder setDocString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        docString_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string doc_string = 10;</code>
       *
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       */
      public Builder clearDocString() {
        bitField0_ = (bitField0_ & ~0x00000008);
        docString_ = getDefaultInstance().getDocString();
        onChanged();
        return this;
      }
      /**
       * <code>optional string doc_string = 10;</code>
       *
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       */
      public Builder setDocStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        docString_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:onnx.OperatorProto)
    }

    static {
      defaultInstance = new OperatorProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:onnx.OperatorProto)
  }

  public interface OperatorSetProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:onnx.OperatorSetProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string magic = 1;</code>
     *
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     */
    boolean hasMagic();
    /**
     * <code>optional string magic = 1;</code>
     *
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     */
    java.lang.String getMagic();
    /**
     * <code>optional string magic = 1;</code>
     *
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     */
    com.google.protobuf.ByteString
        getMagicBytes();

    /**
     * <code>optional int32 ir_version = 2;</code>
     *
     * <pre>
     * All OperatorSetProtos indicate the version of the IR syntax and semantics
     * they adhere to. It is always IR_VERSION.
     * This field MUST be present in this version of the IR
     * </pre>
     */
    boolean hasIrVersion();
    /**
     * <code>optional int32 ir_version = 2;</code>
     *
     * <pre>
     * All OperatorSetProtos indicate the version of the IR syntax and semantics
     * they adhere to. It is always IR_VERSION.
     * This field MUST be present in this version of the IR
     * </pre>
     */
    int getIrVersion();

    /**
     * <code>optional string ir_version_prerelease = 3;</code>
     *
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     */
    boolean hasIrVersionPrerelease();
    /**
     * <code>optional string ir_version_prerelease = 3;</code>
     *
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     */
    java.lang.String getIrVersionPrerelease();
    /**
     * <code>optional string ir_version_prerelease = 3;</code>
     *
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     */
    com.google.protobuf.ByteString
        getIrVersionPrereleaseBytes();

    /**
     * <code>optional string ir_build_metadata = 7;</code>
     *
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     */
    boolean hasIrBuildMetadata();
    /**
     * <code>optional string ir_build_metadata = 7;</code>
     *
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     */
    java.lang.String getIrBuildMetadata();
    /**
     * <code>optional string ir_build_metadata = 7;</code>
     *
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     */
    com.google.protobuf.ByteString
        getIrBuildMetadataBytes();

    /**
     * <code>optional string domain = 4;</code>
     *
     * <pre>
     * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     */
    boolean hasDomain();
    /**
     * <code>optional string domain = 4;</code>
     *
     * <pre>
     * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     */
    java.lang.String getDomain();
    /**
     * <code>optional string domain = 4;</code>
     *
     * <pre>
     * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     */
    com.google.protobuf.ByteString
        getDomainBytes();

    /**
     * <code>optional int64 opset_version = 5;</code>
     *
     * <pre>
     * The version of the set of operators. This is a simple int value
     * that is monotonically increasing as new versions of operator set
     * are published. All operators in this set MUST have version
     * numbers no greater than opset_version.
     * </pre>
     */
    boolean hasOpsetVersion();
    /**
     * <code>optional int64 opset_version = 5;</code>
     *
     * <pre>
     * The version of the set of operators. This is a simple int value
     * that is monotonically increasing as new versions of operator set
     * are published. All operators in this set MUST have version
     * numbers no greater than opset_version.
     * </pre>
     */
    long getOpsetVersion();

    /**
     * <code>optional string doc_string = 6;</code>
     *
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     */
    boolean hasDocString();
    /**
     * <code>optional string doc_string = 6;</code>
     *
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     */
    java.lang.String getDocString();
    /**
     * <code>optional string doc_string = 6;</code>
     *
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     */
    com.google.protobuf.ByteString
        getDocStringBytes();

    /**
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     *
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     */
    java.util.List<onnx.OnnxOperators.OperatorProto> 
        getOperatorList();
    /**
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     *
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     */
    onnx.OnnxOperators.OperatorProto getOperator(int index);
    /**
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     *
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     */
    int getOperatorCount();
    /**
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     *
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     */
    java.util.List<? extends onnx.OnnxOperators.OperatorProtoOrBuilder> 
        getOperatorOrBuilderList();
    /**
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     *
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     */
    onnx.OnnxOperators.OperatorProtoOrBuilder getOperatorOrBuilder(
        int index);

    /**
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     *
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     */
    java.util.List<onnx.OnnxOperators.FunctionProto> 
        getFunctionsList();
    /**
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     *
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     */
    onnx.OnnxOperators.FunctionProto getFunctions(int index);
    /**
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     *
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     */
    int getFunctionsCount();
    /**
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     *
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     */
    java.util.List<? extends onnx.OnnxOperators.FunctionProtoOrBuilder> 
        getFunctionsOrBuilderList();
    /**
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     *
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     */
    onnx.OnnxOperators.FunctionProtoOrBuilder getFunctionsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code onnx.OperatorSetProto}
   *
   * <pre>
   * An OperatorSetProto represents an immutable set of immutable operator
   * specifications.
   * The domain of the set (OperatorSetProto.domain) is a reverse-DNS name
   * that disambiguates operator sets defined by independent entities.
   * The version of the set (opset_version) is a monotonically increasing
   * integer that indicates changes to the membership of the operator set.
   * Operator sets are uniquely identified by a two part identifier (domain, opset_version)
   * Like ModelProto, OperatorSetProto is intended as a top-level file/wire format,
   * and thus has the standard format headers in addition to the operator set information.
   * </pre>
   */
  public static final class OperatorSetProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:onnx.OperatorSetProto)
      OperatorSetProtoOrBuilder {
    // Use OperatorSetProto.newBuilder() to construct.
    private OperatorSetProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OperatorSetProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OperatorSetProto defaultInstance;
    public static OperatorSetProto getDefaultInstance() {
      return defaultInstance;
    }

    public OperatorSetProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OperatorSetProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              magic_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              irVersion_ = input.readInt32();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              irVersionPrerelease_ = bs;
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              domain_ = bs;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000020;
              opsetVersion_ = input.readInt64();
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              docString_ = bs;
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              irBuildMetadata_ = bs;
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                operator_ = new java.util.ArrayList<onnx.OnnxOperators.OperatorProto>();
                mutable_bitField0_ |= 0x00000080;
              }
              operator_.add(input.readMessage(onnx.OnnxOperators.OperatorProto.PARSER, extensionRegistry));
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                functions_ = new java.util.ArrayList<onnx.OnnxOperators.FunctionProto>();
                mutable_bitField0_ |= 0x00000100;
              }
              functions_.add(input.readMessage(onnx.OnnxOperators.FunctionProto.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          operator_ = java.util.Collections.unmodifiableList(operator_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          functions_ = java.util.Collections.unmodifiableList(functions_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return onnx.OnnxOperators.internal_static_onnx_OperatorSetProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return onnx.OnnxOperators.internal_static_onnx_OperatorSetProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              onnx.OnnxOperators.OperatorSetProto.class, onnx.OnnxOperators.OperatorSetProto.Builder.class);
    }

    public static com.google.protobuf.Parser<OperatorSetProto> PARSER =
        new com.google.protobuf.AbstractParser<OperatorSetProto>() {
      public OperatorSetProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OperatorSetProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OperatorSetProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAGIC_FIELD_NUMBER = 1;
    private java.lang.Object magic_;
    /**
     * <code>optional string magic = 1;</code>
     *
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     */
    public boolean hasMagic() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string magic = 1;</code>
     *
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     */
    public java.lang.String getMagic() {
      java.lang.Object ref = magic_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          magic_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string magic = 1;</code>
     *
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     */
    public com.google.protobuf.ByteString
        getMagicBytes() {
      java.lang.Object ref = magic_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        magic_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IR_VERSION_FIELD_NUMBER = 2;
    private int irVersion_;
    /**
     * <code>optional int32 ir_version = 2;</code>
     *
     * <pre>
     * All OperatorSetProtos indicate the version of the IR syntax and semantics
     * they adhere to. It is always IR_VERSION.
     * This field MUST be present in this version of the IR
     * </pre>
     */
    public boolean hasIrVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 ir_version = 2;</code>
     *
     * <pre>
     * All OperatorSetProtos indicate the version of the IR syntax and semantics
     * they adhere to. It is always IR_VERSION.
     * This field MUST be present in this version of the IR
     * </pre>
     */
    public int getIrVersion() {
      return irVersion_;
    }

    public static final int IR_VERSION_PRERELEASE_FIELD_NUMBER = 3;
    private java.lang.Object irVersionPrerelease_;
    /**
     * <code>optional string ir_version_prerelease = 3;</code>
     *
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     */
    public boolean hasIrVersionPrerelease() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string ir_version_prerelease = 3;</code>
     *
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     */
    public java.lang.String getIrVersionPrerelease() {
      java.lang.Object ref = irVersionPrerelease_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          irVersionPrerelease_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ir_version_prerelease = 3;</code>
     *
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIrVersionPrereleaseBytes() {
      java.lang.Object ref = irVersionPrerelease_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        irVersionPrerelease_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IR_BUILD_METADATA_FIELD_NUMBER = 7;
    private java.lang.Object irBuildMetadata_;
    /**
     * <code>optional string ir_build_metadata = 7;</code>
     *
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     */
    public boolean hasIrBuildMetadata() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string ir_build_metadata = 7;</code>
     *
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     */
    public java.lang.String getIrBuildMetadata() {
      java.lang.Object ref = irBuildMetadata_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          irBuildMetadata_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ir_build_metadata = 7;</code>
     *
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIrBuildMetadataBytes() {
      java.lang.Object ref = irBuildMetadata_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        irBuildMetadata_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DOMAIN_FIELD_NUMBER = 4;
    private java.lang.Object domain_;
    /**
     * <code>optional string domain = 4;</code>
     *
     * <pre>
     * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     */
    public boolean hasDomain() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string domain = 4;</code>
     *
     * <pre>
     * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     */
    public java.lang.String getDomain() {
      java.lang.Object ref = domain_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          domain_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string domain = 4;</code>
     *
     * <pre>
     * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDomainBytes() {
      java.lang.Object ref = domain_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        domain_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OPSET_VERSION_FIELD_NUMBER = 5;
    private long opsetVersion_;
    /**
     * <code>optional int64 opset_version = 5;</code>
     *
     * <pre>
     * The version of the set of operators. This is a simple int value
     * that is monotonically increasing as new versions of operator set
     * are published. All operators in this set MUST have version
     * numbers no greater than opset_version.
     * </pre>
     */
    public boolean hasOpsetVersion() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int64 opset_version = 5;</code>
     *
     * <pre>
     * The version of the set of operators. This is a simple int value
     * that is monotonically increasing as new versions of operator set
     * are published. All operators in this set MUST have version
     * numbers no greater than opset_version.
     * </pre>
     */
    public long getOpsetVersion() {
      return opsetVersion_;
    }

    public static final int DOC_STRING_FIELD_NUMBER = 6;
    private java.lang.Object docString_;
    /**
     * <code>optional string doc_string = 6;</code>
     *
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     */
    public boolean hasDocString() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional string doc_string = 6;</code>
     *
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     */
    public java.lang.String getDocString() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          docString_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string doc_string = 6;</code>
     *
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDocStringBytes() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        docString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OPERATOR_FIELD_NUMBER = 8;
    private java.util.List<onnx.OnnxOperators.OperatorProto> operator_;
    /**
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     *
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     */
    public java.util.List<onnx.OnnxOperators.OperatorProto> getOperatorList() {
      return operator_;
    }
    /**
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     *
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     */
    public java.util.List<? extends onnx.OnnxOperators.OperatorProtoOrBuilder> 
        getOperatorOrBuilderList() {
      return operator_;
    }
    /**
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     *
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     */
    public int getOperatorCount() {
      return operator_.size();
    }
    /**
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     *
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     */
    public onnx.OnnxOperators.OperatorProto getOperator(int index) {
      return operator_.get(index);
    }
    /**
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     *
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     */
    public onnx.OnnxOperators.OperatorProtoOrBuilder getOperatorOrBuilder(
        int index) {
      return operator_.get(index);
    }

    public static final int FUNCTIONS_FIELD_NUMBER = 9;
    private java.util.List<onnx.OnnxOperators.FunctionProto> functions_;
    /**
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     *
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     */
    public java.util.List<onnx.OnnxOperators.FunctionProto> getFunctionsList() {
      return functions_;
    }
    /**
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     *
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     */
    public java.util.List<? extends onnx.OnnxOperators.FunctionProtoOrBuilder> 
        getFunctionsOrBuilderList() {
      return functions_;
    }
    /**
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     *
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     */
    public int getFunctionsCount() {
      return functions_.size();
    }
    /**
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     *
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     */
    public onnx.OnnxOperators.FunctionProto getFunctions(int index) {
      return functions_.get(index);
    }
    /**
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     *
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     */
    public onnx.OnnxOperators.FunctionProtoOrBuilder getFunctionsOrBuilder(
        int index) {
      return functions_.get(index);
    }

    private void initFields() {
      magic_ = "";
      irVersion_ = 0;
      irVersionPrerelease_ = "";
      irBuildMetadata_ = "";
      domain_ = "";
      opsetVersion_ = 0L;
      docString_ = "";
      operator_ = java.util.Collections.emptyList();
      functions_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getMagicBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, irVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getIrVersionPrereleaseBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(4, getDomainBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt64(5, opsetVersion_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(6, getDocStringBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(7, getIrBuildMetadataBytes());
      }
      for (int i = 0; i < operator_.size(); i++) {
        output.writeMessage(8, operator_.get(i));
      }
      for (int i = 0; i < functions_.size(); i++) {
        output.writeMessage(9, functions_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getMagicBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, irVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getIrVersionPrereleaseBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getDomainBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, opsetVersion_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getDocStringBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getIrBuildMetadataBytes());
      }
      for (int i = 0; i < operator_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, operator_.get(i));
      }
      for (int i = 0; i < functions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, functions_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static onnx.OnnxOperators.OperatorSetProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static onnx.OnnxOperators.OperatorSetProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static onnx.OnnxOperators.OperatorSetProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static onnx.OnnxOperators.OperatorSetProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static onnx.OnnxOperators.OperatorSetProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static onnx.OnnxOperators.OperatorSetProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static onnx.OnnxOperators.OperatorSetProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static onnx.OnnxOperators.OperatorSetProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static onnx.OnnxOperators.OperatorSetProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static onnx.OnnxOperators.OperatorSetProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(onnx.OnnxOperators.OperatorSetProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code onnx.OperatorSetProto}
     *
     * <pre>
     * An OperatorSetProto represents an immutable set of immutable operator
     * specifications.
     * The domain of the set (OperatorSetProto.domain) is a reverse-DNS name
     * that disambiguates operator sets defined by independent entities.
     * The version of the set (opset_version) is a monotonically increasing
     * integer that indicates changes to the membership of the operator set.
     * Operator sets are uniquely identified by a two part identifier (domain, opset_version)
     * Like ModelProto, OperatorSetProto is intended as a top-level file/wire format,
     * and thus has the standard format headers in addition to the operator set information.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:onnx.OperatorSetProto)
        onnx.OnnxOperators.OperatorSetProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return onnx.OnnxOperators.internal_static_onnx_OperatorSetProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return onnx.OnnxOperators.internal_static_onnx_OperatorSetProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                onnx.OnnxOperators.OperatorSetProto.class, onnx.OnnxOperators.OperatorSetProto.Builder.class);
      }

      // Construct using onnx.OnnxOperators.OperatorSetProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOperatorFieldBuilder();
          getFunctionsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        magic_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        irVersion_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        irVersionPrerelease_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        irBuildMetadata_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        domain_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        opsetVersion_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        docString_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        if (operatorBuilder_ == null) {
          operator_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          operatorBuilder_.clear();
        }
        if (functionsBuilder_ == null) {
          functions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          functionsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return onnx.OnnxOperators.internal_static_onnx_OperatorSetProto_descriptor;
      }

      public onnx.OnnxOperators.OperatorSetProto getDefaultInstanceForType() {
        return onnx.OnnxOperators.OperatorSetProto.getDefaultInstance();
      }

      public onnx.OnnxOperators.OperatorSetProto build() {
        onnx.OnnxOperators.OperatorSetProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public onnx.OnnxOperators.OperatorSetProto buildPartial() {
        onnx.OnnxOperators.OperatorSetProto result = new onnx.OnnxOperators.OperatorSetProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.magic_ = magic_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.irVersion_ = irVersion_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.irVersionPrerelease_ = irVersionPrerelease_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.irBuildMetadata_ = irBuildMetadata_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.domain_ = domain_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.opsetVersion_ = opsetVersion_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.docString_ = docString_;
        if (operatorBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            operator_ = java.util.Collections.unmodifiableList(operator_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.operator_ = operator_;
        } else {
          result.operator_ = operatorBuilder_.build();
        }
        if (functionsBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            functions_ = java.util.Collections.unmodifiableList(functions_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.functions_ = functions_;
        } else {
          result.functions_ = functionsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof onnx.OnnxOperators.OperatorSetProto) {
          return mergeFrom((onnx.OnnxOperators.OperatorSetProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(onnx.OnnxOperators.OperatorSetProto other) {
        if (other == onnx.OnnxOperators.OperatorSetProto.getDefaultInstance()) return this;
        if (other.hasMagic()) {
          bitField0_ |= 0x00000001;
          magic_ = other.magic_;
          onChanged();
        }
        if (other.hasIrVersion()) {
          setIrVersion(other.getIrVersion());
        }
        if (other.hasIrVersionPrerelease()) {
          bitField0_ |= 0x00000004;
          irVersionPrerelease_ = other.irVersionPrerelease_;
          onChanged();
        }
        if (other.hasIrBuildMetadata()) {
          bitField0_ |= 0x00000008;
          irBuildMetadata_ = other.irBuildMetadata_;
          onChanged();
        }
        if (other.hasDomain()) {
          bitField0_ |= 0x00000010;
          domain_ = other.domain_;
          onChanged();
        }
        if (other.hasOpsetVersion()) {
          setOpsetVersion(other.getOpsetVersion());
        }
        if (other.hasDocString()) {
          bitField0_ |= 0x00000040;
          docString_ = other.docString_;
          onChanged();
        }
        if (operatorBuilder_ == null) {
          if (!other.operator_.isEmpty()) {
            if (operator_.isEmpty()) {
              operator_ = other.operator_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureOperatorIsMutable();
              operator_.addAll(other.operator_);
            }
            onChanged();
          }
        } else {
          if (!other.operator_.isEmpty()) {
            if (operatorBuilder_.isEmpty()) {
              operatorBuilder_.dispose();
              operatorBuilder_ = null;
              operator_ = other.operator_;
              bitField0_ = (bitField0_ & ~0x00000080);
              operatorBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOperatorFieldBuilder() : null;
            } else {
              operatorBuilder_.addAllMessages(other.operator_);
            }
          }
        }
        if (functionsBuilder_ == null) {
          if (!other.functions_.isEmpty()) {
            if (functions_.isEmpty()) {
              functions_ = other.functions_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureFunctionsIsMutable();
              functions_.addAll(other.functions_);
            }
            onChanged();
          }
        } else {
          if (!other.functions_.isEmpty()) {
            if (functionsBuilder_.isEmpty()) {
              functionsBuilder_.dispose();
              functionsBuilder_ = null;
              functions_ = other.functions_;
              bitField0_ = (bitField0_ & ~0x00000100);
              functionsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFunctionsFieldBuilder() : null;
            } else {
              functionsBuilder_.addAllMessages(other.functions_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        onnx.OnnxOperators.OperatorSetProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (onnx.OnnxOperators.OperatorSetProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object magic_ = "";
      /**
       * <code>optional string magic = 1;</code>
       *
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       */
      public boolean hasMagic() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string magic = 1;</code>
       *
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       */
      public java.lang.String getMagic() {
        java.lang.Object ref = magic_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            magic_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string magic = 1;</code>
       *
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       */
      public com.google.protobuf.ByteString
          getMagicBytes() {
        java.lang.Object ref = magic_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          magic_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string magic = 1;</code>
       *
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       */
      public Builder setMagic(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        magic_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string magic = 1;</code>
       *
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       */
      public Builder clearMagic() {
        bitField0_ = (bitField0_ & ~0x00000001);
        magic_ = getDefaultInstance().getMagic();
        onChanged();
        return this;
      }
      /**
       * <code>optional string magic = 1;</code>
       *
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       */
      public Builder setMagicBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        magic_ = value;
        onChanged();
        return this;
      }

      private int irVersion_ ;
      /**
       * <code>optional int32 ir_version = 2;</code>
       *
       * <pre>
       * All OperatorSetProtos indicate the version of the IR syntax and semantics
       * they adhere to. It is always IR_VERSION.
       * This field MUST be present in this version of the IR
       * </pre>
       */
      public boolean hasIrVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 ir_version = 2;</code>
       *
       * <pre>
       * All OperatorSetProtos indicate the version of the IR syntax and semantics
       * they adhere to. It is always IR_VERSION.
       * This field MUST be present in this version of the IR
       * </pre>
       */
      public int getIrVersion() {
        return irVersion_;
      }
      /**
       * <code>optional int32 ir_version = 2;</code>
       *
       * <pre>
       * All OperatorSetProtos indicate the version of the IR syntax and semantics
       * they adhere to. It is always IR_VERSION.
       * This field MUST be present in this version of the IR
       * </pre>
       */
      public Builder setIrVersion(int value) {
        bitField0_ |= 0x00000002;
        irVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ir_version = 2;</code>
       *
       * <pre>
       * All OperatorSetProtos indicate the version of the IR syntax and semantics
       * they adhere to. It is always IR_VERSION.
       * This field MUST be present in this version of the IR
       * </pre>
       */
      public Builder clearIrVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        irVersion_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object irVersionPrerelease_ = "";
      /**
       * <code>optional string ir_version_prerelease = 3;</code>
       *
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       */
      public boolean hasIrVersionPrerelease() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string ir_version_prerelease = 3;</code>
       *
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       */
      public java.lang.String getIrVersionPrerelease() {
        java.lang.Object ref = irVersionPrerelease_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            irVersionPrerelease_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ir_version_prerelease = 3;</code>
       *
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIrVersionPrereleaseBytes() {
        java.lang.Object ref = irVersionPrerelease_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          irVersionPrerelease_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ir_version_prerelease = 3;</code>
       *
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       */
      public Builder setIrVersionPrerelease(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        irVersionPrerelease_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ir_version_prerelease = 3;</code>
       *
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       */
      public Builder clearIrVersionPrerelease() {
        bitField0_ = (bitField0_ & ~0x00000004);
        irVersionPrerelease_ = getDefaultInstance().getIrVersionPrerelease();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ir_version_prerelease = 3;</code>
       *
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       */
      public Builder setIrVersionPrereleaseBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        irVersionPrerelease_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object irBuildMetadata_ = "";
      /**
       * <code>optional string ir_build_metadata = 7;</code>
       *
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       */
      public boolean hasIrBuildMetadata() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string ir_build_metadata = 7;</code>
       *
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       */
      public java.lang.String getIrBuildMetadata() {
        java.lang.Object ref = irBuildMetadata_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            irBuildMetadata_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ir_build_metadata = 7;</code>
       *
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIrBuildMetadataBytes() {
        java.lang.Object ref = irBuildMetadata_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          irBuildMetadata_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ir_build_metadata = 7;</code>
       *
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       */
      public Builder setIrBuildMetadata(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        irBuildMetadata_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ir_build_metadata = 7;</code>
       *
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       */
      public Builder clearIrBuildMetadata() {
        bitField0_ = (bitField0_ & ~0x00000008);
        irBuildMetadata_ = getDefaultInstance().getIrBuildMetadata();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ir_build_metadata = 7;</code>
       *
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       */
      public Builder setIrBuildMetadataBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        irBuildMetadata_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object domain_ = "";
      /**
       * <code>optional string domain = 4;</code>
       *
       * <pre>
       * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       */
      public boolean hasDomain() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string domain = 4;</code>
       *
       * <pre>
       * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       */
      public java.lang.String getDomain() {
        java.lang.Object ref = domain_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            domain_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string domain = 4;</code>
       *
       * <pre>
       * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDomainBytes() {
        java.lang.Object ref = domain_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          domain_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string domain = 4;</code>
       *
       * <pre>
       * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       */
      public Builder setDomain(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        domain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string domain = 4;</code>
       *
       * <pre>
       * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       */
      public Builder clearDomain() {
        bitField0_ = (bitField0_ & ~0x00000010);
        domain_ = getDefaultInstance().getDomain();
        onChanged();
        return this;
      }
      /**
       * <code>optional string domain = 4;</code>
       *
       * <pre>
       * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       */
      public Builder setDomainBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        domain_ = value;
        onChanged();
        return this;
      }

      private long opsetVersion_ ;
      /**
       * <code>optional int64 opset_version = 5;</code>
       *
       * <pre>
       * The version of the set of operators. This is a simple int value
       * that is monotonically increasing as new versions of operator set
       * are published. All operators in this set MUST have version
       * numbers no greater than opset_version.
       * </pre>
       */
      public boolean hasOpsetVersion() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int64 opset_version = 5;</code>
       *
       * <pre>
       * The version of the set of operators. This is a simple int value
       * that is monotonically increasing as new versions of operator set
       * are published. All operators in this set MUST have version
       * numbers no greater than opset_version.
       * </pre>
       */
      public long getOpsetVersion() {
        return opsetVersion_;
      }
      /**
       * <code>optional int64 opset_version = 5;</code>
       *
       * <pre>
       * The version of the set of operators. This is a simple int value
       * that is monotonically increasing as new versions of operator set
       * are published. All operators in this set MUST have version
       * numbers no greater than opset_version.
       * </pre>
       */
      public Builder setOpsetVersion(long value) {
        bitField0_ |= 0x00000020;
        opsetVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 opset_version = 5;</code>
       *
       * <pre>
       * The version of the set of operators. This is a simple int value
       * that is monotonically increasing as new versions of operator set
       * are published. All operators in this set MUST have version
       * numbers no greater than opset_version.
       * </pre>
       */
      public Builder clearOpsetVersion() {
        bitField0_ = (bitField0_ & ~0x00000020);
        opsetVersion_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object docString_ = "";
      /**
       * <code>optional string doc_string = 6;</code>
       *
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       */
      public boolean hasDocString() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional string doc_string = 6;</code>
       *
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       */
      public java.lang.String getDocString() {
        java.lang.Object ref = docString_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            docString_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string doc_string = 6;</code>
       *
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDocStringBytes() {
        java.lang.Object ref = docString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          docString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string doc_string = 6;</code>
       *
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       */
      public Builder setDocString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        docString_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string doc_string = 6;</code>
       *
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       */
      public Builder clearDocString() {
        bitField0_ = (bitField0_ & ~0x00000040);
        docString_ = getDefaultInstance().getDocString();
        onChanged();
        return this;
      }
      /**
       * <code>optional string doc_string = 6;</code>
       *
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       */
      public Builder setDocStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        docString_ = value;
        onChanged();
        return this;
      }

      private java.util.List<onnx.OnnxOperators.OperatorProto> operator_ =
        java.util.Collections.emptyList();
      private void ensureOperatorIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          operator_ = new java.util.ArrayList<onnx.OnnxOperators.OperatorProto>(operator_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          onnx.OnnxOperators.OperatorProto, onnx.OnnxOperators.OperatorProto.Builder, onnx.OnnxOperators.OperatorProtoOrBuilder> operatorBuilder_;

      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public java.util.List<onnx.OnnxOperators.OperatorProto> getOperatorList() {
        if (operatorBuilder_ == null) {
          return java.util.Collections.unmodifiableList(operator_);
        } else {
          return operatorBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public int getOperatorCount() {
        if (operatorBuilder_ == null) {
          return operator_.size();
        } else {
          return operatorBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public onnx.OnnxOperators.OperatorProto getOperator(int index) {
        if (operatorBuilder_ == null) {
          return operator_.get(index);
        } else {
          return operatorBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public Builder setOperator(
          int index, onnx.OnnxOperators.OperatorProto value) {
        if (operatorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOperatorIsMutable();
          operator_.set(index, value);
          onChanged();
        } else {
          operatorBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public Builder setOperator(
          int index, onnx.OnnxOperators.OperatorProto.Builder builderForValue) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          operator_.set(index, builderForValue.build());
          onChanged();
        } else {
          operatorBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public Builder addOperator(onnx.OnnxOperators.OperatorProto value) {
        if (operatorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOperatorIsMutable();
          operator_.add(value);
          onChanged();
        } else {
          operatorBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public Builder addOperator(
          int index, onnx.OnnxOperators.OperatorProto value) {
        if (operatorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOperatorIsMutable();
          operator_.add(index, value);
          onChanged();
        } else {
          operatorBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public Builder addOperator(
          onnx.OnnxOperators.OperatorProto.Builder builderForValue) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          operator_.add(builderForValue.build());
          onChanged();
        } else {
          operatorBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public Builder addOperator(
          int index, onnx.OnnxOperators.OperatorProto.Builder builderForValue) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          operator_.add(index, builderForValue.build());
          onChanged();
        } else {
          operatorBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public Builder addAllOperator(
          java.lang.Iterable<? extends onnx.OnnxOperators.OperatorProto> values) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, operator_);
          onChanged();
        } else {
          operatorBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public Builder clearOperator() {
        if (operatorBuilder_ == null) {
          operator_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          operatorBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public Builder removeOperator(int index) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          operator_.remove(index);
          onChanged();
        } else {
          operatorBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public onnx.OnnxOperators.OperatorProto.Builder getOperatorBuilder(
          int index) {
        return getOperatorFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public onnx.OnnxOperators.OperatorProtoOrBuilder getOperatorOrBuilder(
          int index) {
        if (operatorBuilder_ == null) {
          return operator_.get(index);  } else {
          return operatorBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public java.util.List<? extends onnx.OnnxOperators.OperatorProtoOrBuilder> 
           getOperatorOrBuilderList() {
        if (operatorBuilder_ != null) {
          return operatorBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(operator_);
        }
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public onnx.OnnxOperators.OperatorProto.Builder addOperatorBuilder() {
        return getOperatorFieldBuilder().addBuilder(
            onnx.OnnxOperators.OperatorProto.getDefaultInstance());
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public onnx.OnnxOperators.OperatorProto.Builder addOperatorBuilder(
          int index) {
        return getOperatorFieldBuilder().addBuilder(
            index, onnx.OnnxOperators.OperatorProto.getDefaultInstance());
      }
      /**
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       *
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       */
      public java.util.List<onnx.OnnxOperators.OperatorProto.Builder> 
           getOperatorBuilderList() {
        return getOperatorFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          onnx.OnnxOperators.OperatorProto, onnx.OnnxOperators.OperatorProto.Builder, onnx.OnnxOperators.OperatorProtoOrBuilder> 
          getOperatorFieldBuilder() {
        if (operatorBuilder_ == null) {
          operatorBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              onnx.OnnxOperators.OperatorProto, onnx.OnnxOperators.OperatorProto.Builder, onnx.OnnxOperators.OperatorProtoOrBuilder>(
                  operator_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          operator_ = null;
        }
        return operatorBuilder_;
      }

      private java.util.List<onnx.OnnxOperators.FunctionProto> functions_ =
        java.util.Collections.emptyList();
      private void ensureFunctionsIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          functions_ = new java.util.ArrayList<onnx.OnnxOperators.FunctionProto>(functions_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          onnx.OnnxOperators.FunctionProto, onnx.OnnxOperators.FunctionProto.Builder, onnx.OnnxOperators.FunctionProtoOrBuilder> functionsBuilder_;

      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public java.util.List<onnx.OnnxOperators.FunctionProto> getFunctionsList() {
        if (functionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(functions_);
        } else {
          return functionsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public int getFunctionsCount() {
        if (functionsBuilder_ == null) {
          return functions_.size();
        } else {
          return functionsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public onnx.OnnxOperators.FunctionProto getFunctions(int index) {
        if (functionsBuilder_ == null) {
          return functions_.get(index);
        } else {
          return functionsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public Builder setFunctions(
          int index, onnx.OnnxOperators.FunctionProto value) {
        if (functionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionsIsMutable();
          functions_.set(index, value);
          onChanged();
        } else {
          functionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public Builder setFunctions(
          int index, onnx.OnnxOperators.FunctionProto.Builder builderForValue) {
        if (functionsBuilder_ == null) {
          ensureFunctionsIsMutable();
          functions_.set(index, builderForValue.build());
          onChanged();
        } else {
          functionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public Builder addFunctions(onnx.OnnxOperators.FunctionProto value) {
        if (functionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionsIsMutable();
          functions_.add(value);
          onChanged();
        } else {
          functionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public Builder addFunctions(
          int index, onnx.OnnxOperators.FunctionProto value) {
        if (functionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionsIsMutable();
          functions_.add(index, value);
          onChanged();
        } else {
          functionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public Builder addFunctions(
          onnx.OnnxOperators.FunctionProto.Builder builderForValue) {
        if (functionsBuilder_ == null) {
          ensureFunctionsIsMutable();
          functions_.add(builderForValue.build());
          onChanged();
        } else {
          functionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public Builder addFunctions(
          int index, onnx.OnnxOperators.FunctionProto.Builder builderForValue) {
        if (functionsBuilder_ == null) {
          ensureFunctionsIsMutable();
          functions_.add(index, builderForValue.build());
          onChanged();
        } else {
          functionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public Builder addAllFunctions(
          java.lang.Iterable<? extends onnx.OnnxOperators.FunctionProto> values) {
        if (functionsBuilder_ == null) {
          ensureFunctionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, functions_);
          onChanged();
        } else {
          functionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public Builder clearFunctions() {
        if (functionsBuilder_ == null) {
          functions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          functionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public Builder removeFunctions(int index) {
        if (functionsBuilder_ == null) {
          ensureFunctionsIsMutable();
          functions_.remove(index);
          onChanged();
        } else {
          functionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public onnx.OnnxOperators.FunctionProto.Builder getFunctionsBuilder(
          int index) {
        return getFunctionsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public onnx.OnnxOperators.FunctionProtoOrBuilder getFunctionsOrBuilder(
          int index) {
        if (functionsBuilder_ == null) {
          return functions_.get(index);  } else {
          return functionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public java.util.List<? extends onnx.OnnxOperators.FunctionProtoOrBuilder> 
           getFunctionsOrBuilderList() {
        if (functionsBuilder_ != null) {
          return functionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(functions_);
        }
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public onnx.OnnxOperators.FunctionProto.Builder addFunctionsBuilder() {
        return getFunctionsFieldBuilder().addBuilder(
            onnx.OnnxOperators.FunctionProto.getDefaultInstance());
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public onnx.OnnxOperators.FunctionProto.Builder addFunctionsBuilder(
          int index) {
        return getFunctionsFieldBuilder().addBuilder(
            index, onnx.OnnxOperators.FunctionProto.getDefaultInstance());
      }
      /**
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       *
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       */
      public java.util.List<onnx.OnnxOperators.FunctionProto.Builder> 
           getFunctionsBuilderList() {
        return getFunctionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          onnx.OnnxOperators.FunctionProto, onnx.OnnxOperators.FunctionProto.Builder, onnx.OnnxOperators.FunctionProtoOrBuilder> 
          getFunctionsFieldBuilder() {
        if (functionsBuilder_ == null) {
          functionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              onnx.OnnxOperators.FunctionProto, onnx.OnnxOperators.FunctionProto.Builder, onnx.OnnxOperators.FunctionProtoOrBuilder>(
                  functions_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          functions_ = null;
        }
        return functionsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:onnx.OperatorSetProto)
    }

    static {
      defaultInstance = new OperatorSetProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:onnx.OperatorSetProto)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_onnx_FunctionProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_onnx_FunctionProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_onnx_OperatorProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_onnx_OperatorProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_onnx_OperatorSetProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_onnx_OperatorSetProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031onnx/onnx-operators.proto\022\004onnx\032\017onnx/" +
      "onnx.proto\"\277\001\n\rFunctionProto\022\014\n\004name\030\001 \001" +
      "(\t\022\025\n\rsince_version\030\002 \001(\003\022$\n\006status\030\003 \001(" +
      "\0162\024.onnx.OperatorStatus\022\r\n\005input\030\004 \003(\t\022\016" +
      "\n\006output\030\005 \003(\t\022\021\n\tattribute\030\006 \003(\t\022\035\n\004nod" +
      "e\030\007 \003(\0132\017.onnx.NodeProto\022\022\n\ndoc_string\030\010" +
      " \001(\t\"q\n\rOperatorProto\022\017\n\007op_type\030\001 \001(\t\022\025" +
      "\n\rsince_version\030\002 \001(\003\022$\n\006status\030\003 \001(\0162\024." +
      "onnx.OperatorStatus\022\022\n\ndoc_string\030\n \001(\t\"" +
      "\371\001\n\020OperatorSetProto\022\r\n\005magic\030\001 \001(\t\022\022\n\ni",
      "r_version\030\002 \001(\005\022\035\n\025ir_version_prerelease" +
      "\030\003 \001(\t\022\031\n\021ir_build_metadata\030\007 \001(\t\022\016\n\006dom" +
      "ain\030\004 \001(\t\022\025\n\ropset_version\030\005 \001(\003\022\022\n\ndoc_" +
      "string\030\006 \001(\t\022%\n\010operator\030\010 \003(\0132\023.onnx.Op" +
      "eratorProto\022&\n\tfunctions\030\t \003(\0132\023.onnx.Fu" +
      "nctionProto*.\n\016OperatorStatus\022\020\n\014EXPERIM" +
      "ENTAL\020\000\022\n\n\006STABLE\020\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          onnx.Onnx.getDescriptor(),
        }, assigner);
    internal_static_onnx_FunctionProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_onnx_FunctionProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_onnx_FunctionProto_descriptor,
        new java.lang.String[] { "Name", "SinceVersion", "Status", "Input", "Output", "Attribute", "Node", "DocString", });
    internal_static_onnx_OperatorProto_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_onnx_OperatorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_onnx_OperatorProto_descriptor,
        new java.lang.String[] { "OpType", "SinceVersion", "Status", "DocString", });
    internal_static_onnx_OperatorSetProto_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_onnx_OperatorSetProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_onnx_OperatorSetProto_descriptor,
        new java.lang.String[] { "Magic", "IrVersion", "IrVersionPrerelease", "IrBuildMetadata", "Domain", "OpsetVersion", "DocString", "Operator", "Functions", });
    onnx.Onnx.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
