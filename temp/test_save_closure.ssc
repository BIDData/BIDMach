import java.io._

val foo = (a:Int, b:Int) => { a + b }
ClosureCleaner.clean(foo)

val foos = new ObjectOutputStream(new FileOutputStream("/opt/BIDMach/temp/foo_obj"))
val cfos = new FileOutputStream("/opt/BIDMach/temp/foo_cls")
val npw = new PrintWriter("/opt/BIDMach/temp/foo_clsname")

foos.writeObject(foo)
foos.close()

val fooCls = foo.getClass()
val className = fooCls.getName.replaceFirst("^.*\\.", "") + ".class"
val fooClsStream = fooCls.getResourceAsStream(className)

val fooClsBytes = new Array[Byte](512)
var done = true
while (done) {
  var len = fooClsStream.read(fooClsBytes, 0, 512)
  if (len < 0) {
    done = false
  } else {
    cfos.write(fooClsBytes, 0, len)
  }
}
fooClsStream.close()
cfos.close()

npw.println(fooCls.getName)
npw.close()
