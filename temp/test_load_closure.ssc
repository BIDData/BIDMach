import java.io._
import java.nio.charset.StandardCharsets

class MyClassLoader extends ClassLoader {
  def loadClass(name:String, filename:String):Class[_] = {
    val f = new File(filename)
    val b = new Array[Byte](f.length().asInstanceOf[Int])
    val fis = new FileInputStream(filename)
    fis.read(b)
    fis.close()

    return defineClass(name, b, 0, b.length);
  }
}

def fileToString(filename:String):String = {
  val f = new File(filename)
  val in = new FileInputStream(filename)

  val len = f.length().asInstanceOf[Int]
  val b = new Array[Byte](len)

  var totalBytesRead = 0
  var done = false
  while (!done && totalBytesRead < len) {
    var bytesRead = in.read(b, totalBytesRead, len - totalBytesRead)
    if (bytesRead < 0) {
      done = true
    } else {
      totalBytesRead += bytesRead
    }
  }

  new String(b, StandardCharsets.UTF_8)
}

val loader = new MyClassLoader
val fooCls = loader.loadClass(fileToString("/opt/BIDMach/temp/foo_clsname").trim(), "/opt/BIDMach/temp/foo_cls")

val foo = fooCls.newInstance.asInstanceOf[(Int, Int) => (Int)]

foo(1, 2)
